{"version":3,"file":"js/app.js","mappings":"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ACV+J,mBAAoB,CAChB,CACIxL,GACA5C,GACA4C,GACA5C,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACA5C,GACA4C,GACA5C,GACA4C,MAIZ,CACIqL,KAAM,KACN5J,SAAU,6BACV+J,mBAAoB,CAChB,CACIxL,GACAA,GACAA,GACA5C,GACA4C,IAEJ,CACI5C,GACA2C,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACI5C,GACA2C,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACAA,GACAA,GACA5C,GACA4C,QAMpB,CACIqL,KAAM,kBACNE,WAAY,CACR,CACIF,KAAM,OACN5J,SAAU,mBACV+J,mBAAoB,CAChB,CACIxL,GACA5C,GACA4C,GACAA,GACAA,IAEJ,CACIA,GACAD,GACA3C,GACA2C,GACA3C,IAEJ,CACI4C,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACAA,GACA2C,GACAC,IAEJ,CACIA,GACAA,GACAA,GACA5C,GACA4C,MAIZ,CACIqL,KAAM,YACN5J,SAAU,qBACV+J,mBAAoB,CAChB,CACIxL,GACAA,GACAA,GACA5C,GACA4C,IAEJ,CACI5C,GACA2C,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACA4C,GACAA,GACAA,QAMpB,CACIqL,KAAM,mBACNE,WAAY,CACR,CACIF,KAAM,IACN5J,SAAU,+BACV+J,mBAAoB,CAChB,CACIxL,GACAA,GACAA,GACAA,GACAA,IAEJ,CACIA,GACA5C,GACAA,GACA2C,GACA3C,IAEJ,CACI4C,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACA4C,GACAA,GACAA,MAIZ,CACIqL,KAAM,IACN5J,SAAU,+BACV+J,mBAAoB,CAChB,CACIxL,GACA5C,GACA4C,GACAA,GACAA,IAEJ,CACIA,GACAD,GACA3C,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACA4C,GACAA,GACAA,MAIZ,CACIqL,KAAM,IACN5J,SAAU,2BACV+J,mBAAoB,CAChB,CACIxL,GACAA,GACAA,GACAA,GACAA,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACAD,GACA3C,GACA2C,GACAC,IAEJ,CACIA,GACA5C,GACA4C,GACA5C,GACA4C,UAQ5B,CACIqL,KAAM,SACNE,WAAY,CACR,CACIF,KAAM,eACN5J,SACI,+DACJ+J,mBAAoB,CAChB,CACIxL,GACAA,GACAA,GACAA,GACAA,GACAA,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACAA,GACAA,GACAA,GACA4C,IAEJ,CACIA,GACA5C,GACA2C,GACAA,GACA3C,GACA4C,IAEJ,CACIA,GACAA,GACA5C,GACAA,GACA4C,GACAA,UAQ5B,CACIqL,KAAM,MACNC,OAAQ,CACJ,CACID,KAAM,UACNE,WAAY,CACR,CACIF,KAAM,WACN5J,SACI,iDACJ+J,mBAAoB,CAChB,CACIxL,GACAD,GACAC,GACAD,GACAC,IAEJ,CAACD,GAAS3C,GAAQA,GAAQA,GAAQ2C,IAClC,CACIC,GACA5C,GACAA,GACAA,GACA4C,IAEJ,CAACD,GAAS3C,GAAQA,GAAQA,GAAQ2C,IAClC,CACIC,GACAD,GACAC,GACAD,GACAC,MAIZ,CACIqL,KAAM,WACN5J,SACI,2CACJ+J,mBAAoB,CAChB,CACIxL,GACAD,GACAC,GACAD,GACAC,IAEJ,CAAChD,GAAQI,GAAQA,GAAQA,GAAQ2C,IACjC,CACI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","sources":["webpack://rubiks-cube/webpack/runtime/chunk loaded","webpack://rubiks-cube/webpack/runtime/create fake namespace object","webpack://rubiks-cube/./src/tsx/cube/CubeTypes.tsx","webpack://rubiks-cube/./src/tsx/states/cube/CubeActions.tsx","webpack://rubiks-cube/./src/tsx/utils/Vector4.tsx","webpack://rubiks-cube/./src/tsx/utils/Matrix4.tsx","webpack://rubiks-cube/./src/tsx/cube/algorithms/RotationCommand.tsx","webpack://rubiks-cube/./src/tsx/states/LocalStorage.tsx","webpack://rubiks-cube/./src/tsx/states/player/PlayerState.tsx","webpack://rubiks-cube/./src/tsx/cube/CubeUtils.tsx","webpack://rubiks-cube/./src/tsx/states/cube/CubeState.tsx","webpack://rubiks-cube/./src/tsx/states/player/PlayerActions.tsx","webpack://rubiks-cube/./src/tsx/states/States.tsx","webpack://rubiks-cube/./src/tsx/utils/createClassName.tsx","webpack://rubiks-cube/./src/tsx/cube/Arrow.tsx","webpack://rubiks-cube/./src/tsx/cube/FaceArrows.tsx","webpack://rubiks-cube/./src/tsx/cube/Face.tsx","webpack://rubiks-cube/./src/tsx/cube/Cubicle.tsx","webpack://rubiks-cube/./src/tsx/utils/Maybe.tsx","webpack://rubiks-cube/./src/tsx/cube/CubeArrows.tsx","webpack://rubiks-cube/./src/tsx/cube/algorithms/Parser.tsx","webpack://rubiks-cube/./src/tsx/cube/RubiksCube.tsx","webpack://rubiks-cube/./src/tsx/hooks/useComplexState.tsx","webpack://rubiks-cube/./src/tsx/interface/ColorPicker.tsx","webpack://rubiks-cube/./src/tsx/interface/Settings.tsx","webpack://rubiks-cube/./src/tsx/cube/algorithms/CFOP.tsx","webpack://rubiks-cube/./src/tsx/interface/StartConfiguration.tsx","webpack://rubiks-cube/./src/tsx/cube/algorithms/AlgorithmTree.tsx","webpack://rubiks-cube/./src/tsx/interface/Algorithms.tsx","webpack://rubiks-cube/./src/tsx/cube/algorithms/Misc.tsx","webpack://rubiks-cube/./src/tsx/interface/Category.tsx","webpack://rubiks-cube/./src/tsx/interface/Player.tsx","webpack://rubiks-cube/./src/tsx/interface/Interface.tsx","webpack://rubiks-cube/./src/tsx/App.tsx","webpack://rubiks-cube/./src/tsx/states/cube/CubeEpics.tsx","webpack://rubiks-cube/./src/tsx/states/player/PlayerEpics.tsx","webpack://rubiks-cube/./src/tsx/states/Epics.tsx","webpack://rubiks-cube/./src/tsx/states/Store.tsx","webpack://rubiks-cube/./src/index.tsx","webpack://rubiks-cube/webpack/bootstrap","webpack://rubiks-cube/webpack/runtime/compat get default export","webpack://rubiks-cube/webpack/runtime/define property getters","webpack://rubiks-cube/webpack/runtime/global","webpack://rubiks-cube/webpack/runtime/hasOwnProperty shorthand","webpack://rubiks-cube/webpack/runtime/make namespace object","webpack://rubiks-cube/webpack/runtime/node module decorator","webpack://rubiks-cube/webpack/runtime/jsonp chunk loading","webpack://rubiks-cube/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","import { Mat4 } from '../utils/Matrix4';\n\nexport type CubeAxis = [number, number, number];\n\nexport enum Color {\n    BLUE = '#3d81f6',\n    GREEN = '#009d54',\n    RED = '#dc422f',\n    ORANGE = '#ff6c00',\n    WHITE = '#ffffff',\n    YELLOW = '#fdcc09',\n    DEFAULT = '#383838',\n    TRANSPARENT = 'transparent',\n}\n\nexport type ColorMap = {\n    [key in Color]: string;\n};\n\nexport enum Side {\n    FRONT = 'FRONT',\n    BACK = 'BACK',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n    UP = 'UP',\n    DOWN = 'DOWN',\n}\n\nexport enum Direction {\n    CLOCKWISE = 1,\n    ANTI_CLOCKWISE = -1,\n}\n\nexport enum FaceArrowDirection {\n    UP = 180,\n    LEFT = 90,\n    RIGHT = -90,\n    DOWN = 0,\n}\n\nexport interface IFace {\n    id: Side;\n    color: Color;\n    transform: Mat4;\n}\n\nexport interface ICubicle {\n    id: CubeAxis;\n    axis: CubeAxis;\n    faces: IFace[];\n    transform: Mat4;\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { Color, ICubicle } from '../../cube/CubeTypes';\nimport { RotationCommand } from '../../cube/algorithms/RotationCommand';\n\nconst setCubeDimension = createAction<number>('SET_CUBE_DIMENSION');\n\nconst setCubeScale = createAction<number>('SET_CUBE_SCALE');\n\nconst setRotationAnimationSpeed = createAction<number>(\n    'SET_ROTATION_ANIMATION_SPEED'\n);\n\nconst updateCubicles = createAction<ICubicle[]>('UPDATE_CUBICLES');\n\nconst applyRotationCommands = createAction<RotationCommand[]>(\n    'APPLY_ROTATION_COMMANDS'\n);\n\nconst resetCube = createAction('RESET_CUBE');\n\nconst setColor = createAction('SET_COLOR', (key: Color, value: string) => ({\n    payload: {\n        key,\n        value,\n    },\n}));\n\nconst resetColors = createAction('RESET_COLORS');\n\nconst actions = {\n    setCubeDimension,\n    setCubeScale,\n    setRotationAnimationSpeed,\n    updateCubicles,\n    applyRotationCommands,\n    resetCube,\n    setColor,\n    resetColors,\n};\n\nexport { actions as cubeActions };\n","import { zip, add } from 'lodash';\n\nexport type Vec4 = [number, number, number, number];\n\nexport const dot = (a: Vec4, b: Vec4) =>\n    zip(a, b)\n        .map(([a, b]) => (a ?? 0) * (b ?? 0))\n        .reduce(add, 0.0);\n","import { zip, partial } from 'lodash';\nimport { dot, Vec4 } from './Vector4';\n\nexport type Mat4 = [Vec4, Vec4, Vec4, Vec4];\n\nconst toRadian = (degree: number) => (degree / 180) * Math.PI;\n\nexport const identity: Mat4 = [\n    [1.0, 0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0, 0.0],\n    [0.0, 0.0, 1.0, 0.0],\n    [0.0, 0.0, 0.0, 1.0],\n];\n\nexport const fromTranslation = (x: number, y: number, z: number): Mat4 => [\n    [1.0, 0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0, 0.0],\n    [0.0, 0.0, 1.0, 0.0],\n    [x, y, z, 1.0],\n];\n\nexport const fromAngleX = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [1.0, 0.0, 0.0, 0.0],\n        [0.0, cos, sin, 0.0],\n        [0.0, -sin, cos, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromAngleY = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [cos, 0.0, -sin, 0.0],\n        [0.0, 1.0, 0.0, 0.0],\n        [sin, 0.0, cos, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromAngleZ = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [cos, sin, 0.0, 0.0],\n        [-sin, cos, 0.0, 0.0],\n        [0.0, 0.0, 1.0, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromScale = (scale: number): Mat4 => [\n    [scale, 0.0, 0.0, 0.0],\n    [0.0, scale, 0.0, 0.0],\n    [0.0, 0.0, scale, 0.0],\n    [0.0, 0.0, 0.0, 1.0],\n];\n\nexport const transpose = ([x, y, z, w]: Mat4): Mat4 => zip(x, y, z, w) as Mat4;\n\nexport const multiply = (a: Mat4, [x2, y2, z2, w2]: Mat4): Mat4 => {\n    const aTransposed = transpose(a);\n    return [\n        aTransposed.map(partial(dot, x2)),\n        aTransposed.map(partial(dot, y2)),\n        aTransposed.map(partial(dot, z2)),\n        aTransposed.map(partial(dot, w2)),\n    ] as Mat4;\n};\n\nexport const apply = (point: Vec4, mat: Mat4): Vec4 =>\n    transpose(mat).map((row) => dot(row, point)) as Vec4;\n\nexport const toCss = (mat: Mat4): string => `matrix3d(${mat.flat().join(',')})`;\n","import { range } from 'lodash';\nimport { Failure, Result, Success } from 'parsimmon';\nimport { fromAngleX, fromAngleY, fromAngleZ, Mat4 } from '../../utils/Matrix4';\n\nexport interface SingleRotationCommand {\n    readonly axis: RotationAxis;\n    readonly slices: number[];\n    readonly rotation: number;\n}\n\nexport interface LoopedRotationCommands {\n    readonly commands: RotationCommand[];\n    readonly iterations: number;\n}\n\nexport type RotationCommand = SingleRotationCommand | LoopedRotationCommands;\n\nexport const isLoopedRotationCommands = (\n    rotationCommand: RotationCommand\n): rotationCommand is LoopedRotationCommands =>\n    (rotationCommand as LoopedRotationCommands).iterations !== undefined;\n\nexport enum RotationAxis {\n    X = 0,\n    Y = 1,\n    Z = 2,\n}\n\nexport const rotationCommandToMat4 = ({\n    axis,\n    rotation,\n}: SingleRotationCommand): Mat4 => {\n    switch (axis) {\n        case RotationAxis.X: {\n            return fromAngleX(rotation);\n        }\n        case RotationAxis.Y: {\n            return fromAngleY(rotation);\n        }\n        case RotationAxis.Z: {\n            return fromAngleZ(rotation);\n        }\n    }\n};\n\nexport const rotationCommandToCssRotation = ({\n    axis,\n    rotation,\n}: SingleRotationCommand): string => {\n    switch (axis) {\n        case RotationAxis.X: {\n            return `rotateX(${rotation}deg)`;\n        }\n        case RotationAxis.Y: {\n            return `rotateY(${rotation}deg)`;\n        }\n        case RotationAxis.Z: {\n            return `rotateZ(${rotation}deg)`;\n        }\n    }\n};\n\nexport const letterToAxis = (letter: string): RotationAxis => {\n    switch (letter.toUpperCase()) {\n        case 'L':\n        case 'R':\n        case 'M':\n        case 'X':\n            return RotationAxis.X;\n        case 'U':\n        case 'D':\n        case 'E':\n        case 'Y':\n            return RotationAxis.Y;\n        case 'F':\n        case 'B':\n        case 'S':\n        case 'Z':\n            return RotationAxis.Z;\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const letterToSlices = (\n    letter: string,\n    cubeDimension: number\n): number[] => {\n    switch (letter) {\n        case 'F':\n        case 'U':\n        case 'L':\n            return [1];\n        case 'f':\n        case 'u':\n        case 'l':\n            if (cubeDimension < 3) {\n                return [1];\n            } else if (cubeDimension > 3) {\n                return [2];\n            } else {\n                return [1, 2];\n            }\n        case 'B':\n        case 'D':\n        case 'R':\n            return [cubeDimension];\n        case 'b':\n        case 'd':\n        case 'r':\n            if (cubeDimension < 3) {\n                return [cubeDimension];\n            } else if (cubeDimension > 3) {\n                return [cubeDimension - 1];\n            } else {\n                return [cubeDimension - 1, cubeDimension];\n            }\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case 'x':\n        case 'y':\n        case 'z':\n            return range(1, cubeDimension + 1);\n        case 'M':\n        case 'E':\n        case 'S':\n            return (() => {\n                const middleSlice = Math.ceil(cubeDimension / 2);\n                return cubeDimension % 2 === 0\n                    ? [middleSlice, middleSlice + 1]\n                    : [middleSlice];\n            })();\n        case 'm':\n        case 'e':\n        case 's':\n            switch (cubeDimension) {\n                case 1:\n                    return [1];\n                case 2:\n                    return [1, 2];\n                default:\n                    return range(2, cubeDimension);\n            }\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const letterToRotation = (letter: string): number => {\n    switch (letter.toUpperCase()) {\n        case 'F':\n        case 'D':\n        case 'R':\n        case 'E': // Same as D\n        case 'S': // Same as F\n        case 'X': // Same as R\n        case 'Z': // Same as F\n            return 90;\n        case 'B':\n        case 'U':\n        case 'L':\n        case 'M': // Same as L\n        case 'Y': // Same as U\n            return -90;\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const wide = (hasWide: boolean) => (\n    letter: string,\n    slices: number[],\n    cubeDimension: number\n): number[] => {\n    if (hasWide) {\n        switch (letter.toUpperCase()) {\n            case 'B':\n            case 'D':\n            case 'R':\n                return range(cubeDimension - slices[0] + 1, cubeDimension + 1);\n            default:\n                return range(1, slices[0] + 1);\n        }\n    } else {\n        switch (letter.toUpperCase()) {\n            case 'B':\n            case 'D':\n            case 'R':\n                return slices.map((slice) => cubeDimension + 1 - slice);\n            default:\n                return slices;\n        }\n    }\n};\n\nexport const prime = (hasPrime: boolean) => (rotation: number): number =>\n    hasPrime ? rotation * -1 : rotation;\nexport const double = (hasDouble: boolean) => (rotation: number): number =>\n    hasDouble ? Math.sign(rotation) * 180 : rotation;\n\nexport const isError = (result: Result<RotationCommand[]>): result is Failure =>\n    !result.status;\n\nexport const isOk = (\n    result: Result<RotationCommand[]>\n): result is Success<RotationCommand[]> => result.status;\n","import { Color, ColorMap } from '../cube/CubeTypes';\n\nexport const COLOR_MAP = 'colorMap';\n\nexport const defaultColorMap: ColorMap = {\n    [Color.BLUE]: Color.BLUE,\n    [Color.GREEN]: Color.GREEN,\n    [Color.RED]: Color.RED,\n    [Color.ORANGE]: Color.ORANGE,\n    [Color.WHITE]: Color.WHITE,\n    [Color.YELLOW]: Color.YELLOW,\n    [Color.DEFAULT]: Color.DEFAULT,\n    [Color.TRANSPARENT]: Color.TRANSPARENT,\n};\n\nexport const loadColorMap = (): ColorMap => {\n    const loadedColorMap = localStorage.getItem(COLOR_MAP);\n    if (loadedColorMap) {\n        return JSON.parse(loadedColorMap) as ColorMap;\n    } else {\n        return defaultColorMap;\n    }\n};\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { playerActions } from './PlayerActions';\r\nimport {\r\n    RotationCommand,\r\n    SingleRotationCommand,\r\n} from '../../cube/algorithms/RotationCommand';\r\nimport { Result } from 'parsimmon';\r\nimport { cubeActions } from '../cube/CubeActions';\r\n\r\nexport enum PlayerStatus {\r\n    STOPPED = 'STOPPED',\r\n    PLAYING = 'PLAYING',\r\n    PAUSED = 'PAUSED',\r\n}\r\n\r\nexport interface IPlayerState {\r\n    notation: string;\r\n    rotationCommands: Result<RotationCommand[]>;\r\n    currentCommand?: SingleRotationCommand;\r\n    status: PlayerStatus;\r\n}\r\n\r\nconst initialPlayerState: IPlayerState = {\r\n    notation: '',\r\n    rotationCommands: { status: true, value: [] },\r\n    status: PlayerStatus.STOPPED,\r\n};\r\n\r\nexport const playerReducer = createReducer(initialPlayerState, (builder) => {\r\n    builder\r\n        .addCase(playerActions.updateNotation, (state, action) => {\r\n            state.notation = action.payload;\r\n        })\r\n        .addCase(playerActions.parsedNotation, (state, action) => {\r\n            state.rotationCommands = action.payload;\r\n        })\r\n        .addCase(playerActions.play, (state, _action) => {\r\n            state.status = PlayerStatus.PLAYING;\r\n        })\r\n        .addCase(playerActions.unPause, (state, _action) => {\r\n            state.status = PlayerStatus.PLAYING;\r\n        })\r\n        .addCase(playerActions.pause, (state, _action) => {\r\n            state.status = PlayerStatus.PAUSED;\r\n        })\r\n        .addCase(playerActions.stop, (state, _action) => {\r\n            state.status = PlayerStatus.STOPPED;\r\n        })\r\n        .addCase(playerActions.setCurrentRotationCommand, (state, action) => {\r\n            state.currentCommand = action.payload;\r\n        })\r\n        .addCase(cubeActions.applyRotationCommands, (state, _action) => {\r\n            state.currentCommand = undefined;\r\n        });\r\n});\r\n","import { range, zip, curry } from 'lodash';\r\nimport {\r\n    ICubicle,\r\n    IFace,\r\n    CubeAxis,\r\n    Color,\r\n    Side,\r\n    FaceArrowDirection,\r\n} from './CubeTypes';\r\nimport {\r\n    Mat4,\r\n    multiply,\r\n    fromTranslation,\r\n    fromAngleY,\r\n    fromAngleX,\r\n    apply,\r\n} from '../utils/Matrix4';\r\nimport { Vec4 } from '../utils/Vector4';\r\nimport {\r\n    RotationCommand,\r\n    isLoopedRotationCommands,\r\n    rotationCommandToMat4,\r\n    SingleRotationCommand,\r\n} from './algorithms/RotationCommand';\r\n\r\nconst sideToColor = {\r\n    [Side.FRONT]: Color.BLUE,\r\n    [Side.BACK]: Color.GREEN,\r\n    [Side.LEFT]: Color.ORANGE,\r\n    [Side.RIGHT]: Color.RED,\r\n    [Side.UP]: Color.YELLOW,\r\n    [Side.DOWN]: Color.WHITE,\r\n};\r\n\r\nconst sideToTransform = (side: Side, cubicleSize: number): Mat4 => {\r\n    const halfCubicleSize = cubicleSize / 2.0;\r\n    return {\r\n        [Side.FRONT]: fromTranslation(0, 0, halfCubicleSize),\r\n        [Side.BACK]: multiply(\r\n            fromTranslation(0, 0, -halfCubicleSize),\r\n            fromAngleY(180)\r\n        ),\r\n        [Side.LEFT]: multiply(\r\n            fromTranslation(-halfCubicleSize, 0, 0),\r\n            fromAngleY(-90)\r\n        ),\r\n        [Side.RIGHT]: multiply(\r\n            fromTranslation(halfCubicleSize, 0, 0),\r\n            fromAngleY(90)\r\n        ),\r\n        [Side.UP]: multiply(\r\n            fromTranslation(0, -halfCubicleSize, 0),\r\n            fromAngleX(90)\r\n        ),\r\n        [Side.DOWN]: multiply(\r\n            fromTranslation(0, halfCubicleSize, 0),\r\n            fromAngleX(-90)\r\n        ),\r\n    }[side];\r\n};\r\n\r\nconst axisToTranslation = (\r\n    [x, y, z]: CubeAxis,\r\n    cubicleSize: number,\r\n    cubicleGap: number,\r\n    cubeDimension: number\r\n): Mat4 => {\r\n    const offset = (cubeDimension + 1) * cubicleSize * (cubicleGap / 2);\r\n    const sizeGap = cubicleSize * cubicleGap;\r\n    return fromTranslation(\r\n        x * sizeGap - offset,\r\n        y * sizeGap - offset,\r\n        -z * sizeGap + offset\r\n    );\r\n};\r\n\r\nexport const rotateAxis = (\r\n    axis: CubeAxis,\r\n    rotation: Mat4,\r\n    cubeDimension: number\r\n): CubeAxis => {\r\n    const offset = (cubeDimension + 1) * 0.5;\r\n    const point = axis.map((it, index) =>\r\n        index === 2 ? -it + offset : it - offset\r\n    );\r\n    const rotatedPoint = apply([...point, 1] as Vec4, rotation).slice(0, 3);\r\n    return rotatedPoint\r\n        .map((it, index) => (index === 2 ? -it + offset : it + offset))\r\n        .map(Math.round) as CubeAxis;\r\n};\r\n\r\nconst isCubicleVisible = (axis: CubeAxis, cubeDimension: number) =>\r\n    axis.some((it) => it === 1 || it === cubeDimension);\r\n\r\nconst isOuterFace = (side: Side, [x, y, z]: CubeAxis, cubeDimension: number) =>\r\n    ({\r\n        [Side.FRONT]: z === 1,\r\n        [Side.BACK]: z === cubeDimension,\r\n        [Side.LEFT]: x === 1,\r\n        [Side.RIGHT]: x === cubeDimension,\r\n        [Side.UP]: y === 1,\r\n        [Side.DOWN]: y === cubeDimension,\r\n    }[side]);\r\n\r\nconst generateFace = (\r\n    side: Side,\r\n    axis: CubeAxis,\r\n    cubicleSize: number,\r\n    cubeDimension: number\r\n): IFace => ({\r\n    id: side,\r\n    color: isOuterFace(side, axis, cubeDimension)\r\n        ? sideToColor[side]\r\n        : Color.DEFAULT,\r\n    transform: sideToTransform(side, cubicleSize),\r\n});\r\n\r\nexport const generateCubicles = (\r\n    cubicleSize: number,\r\n    cubicleGap: number,\r\n    cubeDimension: number\r\n): ICubicle[] => {\r\n    const indexes = range(1, cubeDimension + 1);\r\n    return indexes\r\n        .flatMap((z) =>\r\n            indexes.flatMap((y) => indexes.map<CubeAxis>((x) => [x, y, z]))\r\n        )\r\n        .filter((axis) => isCubicleVisible(axis, cubeDimension))\r\n        .map<ICubicle>((axis) => ({\r\n            id: axis,\r\n            axis,\r\n            faces: Object.values(Side).map((side) =>\r\n                generateFace(side, axis, cubicleSize, cubeDimension)\r\n            ),\r\n            transform: axisToTranslation(\r\n                axis,\r\n                cubicleSize,\r\n                cubicleGap,\r\n                cubeDimension\r\n            ),\r\n        }));\r\n};\r\n\r\nexport const canApplyRotationCommand = (\r\n    cubeAxis: CubeAxis,\r\n    { slices, axis }: SingleRotationCommand\r\n): boolean => slices.includes(cubeAxis[axis]);\r\n\r\nexport const applyRotationCommand = (\r\n    cubicles: ICubicle[],\r\n    rotationCommand: RotationCommand,\r\n    cubeDimension: number\r\n): ICubicle[] => {\r\n    if (isLoopedRotationCommands(rotationCommand)) {\r\n        return range(0, rotationCommand.iterations).reduce(\r\n            (cubicles2, _) =>\r\n                rotationCommand.commands.reduce(\r\n                    (cubicles3, command) =>\r\n                        applyRotationCommand(cubicles3, command, cubeDimension),\r\n                    cubicles2\r\n                ),\r\n            cubicles\r\n        );\r\n    } else {\r\n        return cubicles.map((cubicle) => {\r\n            if (canApplyRotationCommand(cubicle.axis, rotationCommand)) {\r\n                const rotationMat = rotationCommandToMat4(rotationCommand);\r\n                return {\r\n                    ...cubicle,\r\n                    axis: rotateAxis(cubicle.axis, rotationMat, cubeDimension),\r\n                    transform: multiply(rotationMat, cubicle.transform),\r\n                };\r\n            } else {\r\n                return cubicle;\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nexport const generateFaceArrowCommand = curry(\r\n    (\r\n        cubeAxis: CubeAxis,\r\n        cubicleRotation: Mat4,\r\n        originalSide: Side,\r\n        faceArrow: FaceArrowDirection\r\n    ): SingleRotationCommand => {\r\n        // TODO find a way to calculate this from existing matrices\r\n        const [down, right] = {\r\n            [Side.FRONT]: [\r\n                [-1, 0, 0],\r\n                [0, 1, 0],\r\n            ],\r\n            [Side.BACK]: [\r\n                [1, 0, 0],\r\n                [0, 1, 0],\r\n            ],\r\n            [Side.LEFT]: [\r\n                [0, 0, -1],\r\n                [0, 1, 0],\r\n            ],\r\n            [Side.RIGHT]: [\r\n                [0, 0, 1],\r\n                [0, 1, 0],\r\n            ],\r\n            [Side.UP]: [\r\n                [-1, 0, 0],\r\n                [0, 0, 1],\r\n            ],\r\n            [Side.DOWN]: [\r\n                [-1, 0, 0],\r\n                [0, 0, -1],\r\n            ],\r\n        }[originalSide];\r\n\r\n        const point = {\r\n            [FaceArrowDirection.DOWN]: down,\r\n            [FaceArrowDirection.RIGHT]: right,\r\n            [FaceArrowDirection.UP]: down.map((it) => it * -1),\r\n            [FaceArrowDirection.LEFT]: right.map((it) => it * -1),\r\n        }[faceArrow];\r\n\r\n        const rotatedPoint = apply([...point, 0] as Vec4, cubicleRotation)\r\n            .slice(0, 3)\r\n            .map(Math.round);\r\n\r\n        const newCubeAxis = zip(cubeAxis, rotatedPoint).map(\r\n            ([it, sign]) => it! * sign!\r\n        );\r\n\r\n        const axis = newCubeAxis.findIndex((it) => it !== 0);\r\n        const slice = newCubeAxis[axis];\r\n\r\n        return {\r\n            axis,\r\n            slices: [Math.abs(slice)],\r\n            rotation: 90 * Math.sign(slice),\r\n        };\r\n    }\r\n);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport { cubeActions } from './CubeActions';\r\nimport { ColorMap, ICubicle } from '../../cube/CubeTypes';\r\nimport { fromAngleX, fromAngleY, Mat4, multiply } from '../../utils/Matrix4';\r\nimport { applyRotationCommand } from '../../cube/CubeUtils';\r\nimport { defaultColorMap, loadColorMap } from '../LocalStorage';\r\n\r\nexport interface ICubeState {\r\n    dimension: number;\r\n    size: number;\r\n    gapFactor: number;\r\n    scale: number;\r\n    rotationDuration: number;\r\n    cubicles: ICubicle[];\r\n    rotation: Mat4;\r\n    colorMap: ColorMap;\r\n}\r\n\r\nconst initialCubeState: ICubeState = {\r\n    dimension: 3,\r\n    size: 300,\r\n    gapFactor: 1.01,\r\n    scale: 1.0,\r\n    rotationDuration: 750,\r\n    cubicles: [],\r\n    rotation: multiply(fromAngleX(-45), fromAngleY(-45)),\r\n    colorMap: loadColorMap(),\r\n};\r\n\r\nexport const cubeReducer = createReducer(initialCubeState, (builder) => {\r\n    builder\r\n        .addCase(cubeActions.setCubeDimension, (state, action) => {\r\n            state.dimension = action.payload;\r\n        })\r\n        .addCase(cubeActions.setCubeScale, (state, action) => {\r\n            state.scale = action.payload;\r\n        })\r\n        .addCase(cubeActions.setRotationAnimationSpeed, (state, action) => {\r\n            state.rotationDuration = action.payload;\r\n        })\r\n        .addCase(cubeActions.updateCubicles, (state, action) => {\r\n            state.cubicles = action.payload;\r\n        })\r\n        .addCase(cubeActions.applyRotationCommands, (state, action) => {\r\n            state.cubicles = action.payload.reduce(\r\n                (cubicles, command) =>\r\n                    applyRotationCommand(cubicles, command, state.dimension),\r\n                state.cubicles\r\n            );\r\n        })\r\n        .addCase(cubeActions.setColor, (state, action) => {\r\n            state.colorMap[action.payload.key] = action.payload.value;\r\n        })\r\n        .addCase(cubeActions.resetColors, (state, _action) => {\r\n            state.colorMap = defaultColorMap;\r\n        });\r\n});\r\n","import { createAction } from '@reduxjs/toolkit';\nimport { Result } from 'parsimmon';\nimport {\n    RotationCommand,\n    SingleRotationCommand,\n} from '../../cube/algorithms/RotationCommand';\n\nconst play = createAction<RotationCommand[]>('PLAY');\nconst stop = createAction('STOP');\nconst pause = createAction('PAUSE');\nconst unPause = createAction('UN_PAUSE');\n\nconst updateNotation = createAction<string>('UPDATE_NOTATION');\n\nconst parsedNotation = createAction<Result<RotationCommand[]>>(\n    'PARSED_NOTATION'\n);\n\nconst setCurrentRotationCommand = createAction<SingleRotationCommand>(\n    'SET_CURRENT_ROTATION_COMMAND'\n);\n\nconst actions = {\n    play,\n    stop,\n    pause,\n    unPause,\n    updateNotation,\n    parsedNotation,\n    setCurrentRotationCommand,\n};\n\nexport { actions as playerActions };\n","import { Action, combineReducers } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { cubeReducer, ICubeState } from './cube/CubeState';\nimport { useSelector } from 'react-redux';\nimport { IPlayerState, playerReducer } from './player/PlayerState';\n\nexport interface AppState {\n    cube: ICubeState;\n    player: IPlayerState;\n}\n\nexport const reducer = combineReducers<AppState>({\n    cube: cubeReducer,\n    player: playerReducer,\n});\n\nexport type AppEpic = Epic<Action, Action, AppState>;\n\nexport const useRedux = function <T>(selector: (state: AppState) => T) {\n    return useSelector<AppState, T>(selector);\n};\n","export interface IClassNameList {\n    hasClasses: boolean;\n    classNames: string[];\n}\n\nexport type ClassNameDictionary = {\n    [key: string]: boolean | undefined;\n};\n\nconst isClassNameList = (\n    arg: ClassNameDictionary | IClassNameList\n): arg is IClassNameList => (arg as IClassNameList).classNames !== undefined;\n\n/**\n * Create a single className string out of multiple classNames\n *\n * @param {string | ClassNameDictionary | IClassNameList}  classNames - classNames as simple string,\n * ClassNameDictionary where the key is used as classname and the value defines if it is used ({'myClass': true}),\n * ClassNameList where a boolean key defines if a whole list of classes should be used {hasClasses: true, classNames: ['myClass']}\n * @return {string} - the className\n */\nconst createClassName = (\n    ...classNames: (string | undefined | ClassNameDictionary | IClassNameList)[]\n) =>\n    classNames\n        .map((className) => {\n            if (typeof className === 'object') {\n                if (isClassNameList(className)) {\n                    return className.hasClasses\n                        ? className.classNames.join(' ')\n                        : '';\n                } else {\n                    return Object.keys(className)\n                        .filter((key) => className[key])\n                        .join(' ');\n                }\n            }\n            return className;\n        })\n        .filter((className) => className?.length)\n        .join(' ');\n\nexport default createClassName;\n","import React from 'react';\nimport createClassName from '../utils/createClassName';\n\ninterface IArrowProps {\n    className?: string;\n}\n\nconst Arrow: React.FC<IArrowProps> = ({ className = '' }) => (\n    <g className={createClassName('arrow', className)}>\n        <line x1={0} y1={40} x2={0} y2={-40} />\n        <line x1={0} y1={-40} x2={-40} y2={0} />\n        <line x1={0} y1={-40} x2={-40} y2={0} style={{ transform: 'scale(-1, 1)' }} />\n    </g>\n);\n\nexport default React.memo(Arrow);\n","import React from 'react';\nimport './Arrows.scss';\nimport Arrow from './Arrow';\nimport { FaceArrowDirection } from './CubeTypes';\n\ninterface IArrowsProps {\n    rotate: (faceArrow: FaceArrowDirection) => void;\n}\n\nconst FaceArrows: React.FunctionComponent<IArrowsProps> = ({ rotate }) => (\n    <svg viewBox=\"0 0 100 100\" className=\"face-arrows-svg\">\n        <g className=\"face-arrows-wrapper\">\n            <FaceArrow direction={FaceArrowDirection.UP} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.DOWN} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.LEFT} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.RIGHT} rotate={rotate} />\n        </g>\n    </svg>\n);\n\ninterface IArrowProps {\n    direction: FaceArrowDirection;\n    rotate: (faceArrow: FaceArrowDirection) => void;\n}\n\nconst FaceArrow: React.FC<IArrowProps> = ({ direction, rotate }) => (\n    <g\n        className=\"face-arrow-wrapper\"\n        style={{ transform: `rotate(${direction}deg)` }}\n        onClick={() => rotate(direction)}\n    >\n        <rect width=\"100%\" height=\"100%\" className=\"face-arrow-wrapper__box\" />\n        <Arrow className=\"face-arrow\" />\n    </g>\n);\n\nexport default FaceArrows;\n","import React, { useState } from 'react';\nimport { Color, FaceArrowDirection } from './CubeTypes';\nimport { Mat4, toCss } from '../utils/Matrix4';\nimport FaceArrows from './FaceArrows';\nimport { SingleRotationCommand } from './algorithms/RotationCommand';\nimport { useDispatch } from 'react-redux';\nimport { playerActions } from '../states/player/PlayerActions';\nimport { useRedux } from '../states/States';\n\ninterface IFaceProps {\n    transform: Mat4;\n    color: Color;\n    generateArrowCommand: (\n        faceArrow: FaceArrowDirection\n    ) => SingleRotationCommand;\n}\n\nconst Face: React.FunctionComponent<IFaceProps> = ({\n    transform,\n    color,\n    generateArrowCommand,\n}) => {\n    const [isHovered, setHovered] = useState(false);\n    const dispatch = useDispatch();\n    const colorMap = useRedux((state) => state.cube.colorMap);\n\n    const rotate = (faceArrow: FaceArrowDirection) =>\n        dispatch(playerActions.play([generateArrowCommand(faceArrow)]));\n\n    const onMouseEnter = () => setHovered(true);\n    const onMouseLeave = () => setHovered(false);\n\n    const style: React.CSSProperties = {\n        backgroundColor: colorMap[color],\n        transform: toCss(transform),\n    };\n\n    return (\n        <div\n            className=\"rubiks-cube__face\"\n            style={style}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {isHovered &&\n                color !== colorMap[Color.DEFAULT] &&\n                color !== colorMap[Color.TRANSPARENT] && (\n                    <FaceArrows rotate={rotate} />\n                )}\n        </div>\n    );\n};\n\nexport default React.memo(Face);\n","import React from 'react';\nimport { Mat4, toCss } from '../utils/Matrix4';\nimport { CubeAxis, IFace } from './CubeTypes';\nimport Face from './Face';\nimport { generateFaceArrowCommand } from './CubeUtils';\n\ninterface ICubicleProps {\n    axis: CubeAxis;\n    faces: IFace[];\n    animatedTransform: string;\n    transform: Mat4;\n    size: number;\n    rotationDuration: number;\n}\n\nconst Cubicle: React.FunctionComponent<ICubicleProps> = ({\n    axis,\n    faces,\n    animatedTransform,\n    transform,\n    size,\n    rotationDuration,\n}) => {\n    const style: React.CSSProperties = {\n        transform: animatedTransform + toCss(transform),\n        width: size,\n        height: size,\n        transition:\n            animatedTransform === 'rotate(0)'\n                ? ''\n                : `transform ${rotationDuration}ms`,\n    };\n\n    const generateArrowCommand = generateFaceArrowCommand(axis, transform);\n\n    return (\n        <div className=\"rubiks-cube__cubicle\" style={style}>\n            {faces.map(({ id, transform, color }) => (\n                <Face\n                    key={id}\n                    transform={transform}\n                    color={color}\n                    generateArrowCommand={generateArrowCommand(id)}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default React.memo(Cubicle);\n","import { isFunction, isNil } from 'lodash';\n\ntype TypeOrMaybeType<T> = T | Maybe<T>;\ntype FunctionOrValue<T> = (() => TypeOrMaybeType<T>) | TypeOrMaybeType<T>;\n\nclass Maybe<T> {\n    /**\n     * Create a maybe with a value T\n     * If the value is already a maybe then the returning type WON'T be double wrapped with a maybe\n     * Throws error if value is null or undefined\n     * @param value\n     */\n    static some<T>(value: FunctionOrValue<T>): Maybe<NonNullable<T>> {\n        if (isNil(value)) {\n            throw Error('Provided value must not be empty');\n        }\n\n        const result = isFunction(value) ? value()! : value!;\n\n        if (result instanceof Maybe) {\n            return result as Maybe<NonNullable<T>>;\n        }\n\n        return new Maybe<NonNullable<T>>(result);\n    }\n\n    /**\n     * Create a maybe with no value\n     */\n    static none<T>(): Maybe<NonNullable<T>> {\n        return new Maybe<NonNullable<T>>(null);\n    }\n\n    /**\n     * Create a maybe that is either some or none depending on the provided value\n     * If the value is already a maybe then the returning type WON'T be double wrapped with a maybe\n     * @param value\n     */\n    static of<T>(value: FunctionOrValue<T>): Maybe<NonNullable<T>> {\n        return isNil(value) ? Maybe.none() : Maybe.some(value);\n    }\n\n    /**\n     * Create a maybe from a function that might throw an error\n     * Returns none if an error is thrown\n     * @param valueFunction\n     */\n    static tryOf<T>(valueFunction: () => T): Maybe<NonNullable<T>> {\n        try {\n            const value = valueFunction();\n            return Maybe.of(value);\n        } catch (e) {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * Check if maybe is a some\n     */\n    isSome = (): boolean => !this.isNone();\n\n    /**\n     * Check if maybe is a none\n     */\n    isNone = (): boolean => isNil(this.value);\n\n    /**\n     * Get the value of the maybe\n     * Avoid this function if possible\n     * Throws error if the maybe is a none\n     */\n    unwrap = (): T => {\n        if (this.isNone()) {\n            throw Error('Provided value must not be empty');\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe\n     * Avoid this function if possible\n     * Throws custom error message if the maybe is a none\n     * @param errorMsg\n     */\n    expect = (errorMsg: string): T => {\n        if (this.isNone()) {\n            throw Error(errorMsg);\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe if it is a some otherwise use the provided default value\n     * @param defaultValue - default value (or function that creates a default value) to be used if value is none\n     */\n    unwrapOr = (defaultValue: (() => T) | T): T => {\n        if (this.isNone()) {\n            return isFunction(defaultValue) ? defaultValue() : defaultValue;\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe to work with it and return a new type wrapped in a maybe\n     * If the new type is also a maybe then the returning type WON'T be double wrapped with a maybe\n     * @param onSome - a function receiving the value returning a new value\n     */\n    map<U>(onSome: (value: T) => U | Maybe<U>): Maybe<NonNullable<U>> {\n        if (this.isNone()) {\n            return (this as unknown) as Maybe<NonNullable<U>>;\n        }\n\n        return Maybe.of(() => onSome(this.value!));\n    }\n\n    /**\n     * Get the value of the maybe to work with it and return a new type if the maybe is some otherwise use provided default value\n     * @param onSome - a function receiving the value returning a new value\n     * @param defaultValue - default value (or function that creates a default value) to be used if value is none\n     */\n    mapOr<U>(onSome: (value: T) => U, defaultValue: (() => U) | U): U {\n        if (this.isNone()) {\n            return isFunction(defaultValue) ? defaultValue() : defaultValue;\n        }\n\n        return onSome(this.value!);\n    }\n\n    /**\n     * Calls predicate with the contained value and returns this if predicate is true otherwise returns None\n     * @param predicate - filter function\n     */\n    filter(predicate: (value: T) => boolean): Maybe<NonNullable<T>> {\n        if (this.isSome()) {\n            if (predicate(this.unwrap())) {\n                return (this as unknown) as Maybe<NonNullable<T>>;\n            }\n        }\n\n        return Maybe.none();\n    }\n\n    /**\n     * Use provided value if this is Some otherwise return None\n     * @param other - provided value\n     */\n    and<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        if (this.isSome()) {\n            return Maybe.of(other);\n        }\n\n        return (this as unknown) as Maybe<NonNullable<T | U>>;\n    }\n\n    /**\n     * Use provided value if this is None otherwise return this\n     * @param other - provided value\n     */\n    or<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        if (this.isNone()) {\n            return Maybe.of(other);\n        }\n\n        return (this as unknown) as Maybe<NonNullable<T | U>>;\n    }\n\n    /**\n     * Use this if some, or use provided value if some otherwise return None\n     * @param other - provided value\n     */\n    xor<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        const that = Maybe.of(other);\n\n        if (this.isSome() && that.isNone()) {\n            return (this as unknown) as Maybe<NonNullable<T | U>>;\n        } else if (this.isNone() && that.isSome()) {\n            return that;\n        } else {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * Create a maybe from a function that might throw an error\n     * Returns none if an error is thrown\n     * @param onSome\n     */\n    try<U>(onSome: (value: T) => U | Maybe<U>): Maybe<NonNullable<U>> {\n        try {\n            return this.map(onSome);\n        } catch (e) {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * If value of the maybe is some call the provided function\n     * @param onSome - function receiving the value\n     */\n    ifIsSome = (onSome: (value: T) => void): this => {\n        if (this.isSome()) {\n            onSome(this.value!);\n        }\n\n        return this;\n    };\n\n    /**\n     * If value of the maybe is none call the provided function\n     * @param onNone - function called if value is none\n     */\n    ifIsNone = (onNone: () => void): this => {\n        if (this.isNone()) {\n            onNone();\n        }\n\n        return this;\n    };\n\n    /**\n     * Compare the containing value with the provided value\n     * Returns false if isNone\n     * @param value - value to compare\n     */\n    contains(value: T): boolean {\n        if (this.isSome()) {\n            return this.unwrap() === value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if two maybe instances are the same\n     * @param maybe - a maybe to compare\n     */\n    equals = (maybe: Maybe<T>) =>\n        (this.isNone() && maybe.isNone()) ||\n        (this.isSome() && maybe.contains(this.unwrap()));\n\n    private constructor(private value: T | null) {}\n}\n\nexport default Maybe;\n","import React from 'react';\nimport Arrow from './Arrow';\nimport './Arrows.scss';\nimport { Direction } from './CubeTypes';\nimport { makeNotationParser } from './algorithms/Parser';\nimport { useDispatch } from 'react-redux';\nimport { playerActions } from '../states/player/PlayerActions';\n\nenum Side {\n    FRONT = 'rotateY(0deg)',\n    RIGHT = 'rotateY(90deg)',\n}\n\ninterface ICubeArrowsProps {\n    size: number;\n    cubicleSize: number;\n    cubeDimension: number;\n}\n\nconst CubeArrows: React.FunctionComponent<ICubeArrowsProps> = ({\n    size,\n    cubicleSize,\n    cubeDimension,\n}) => {\n    const dispatch = useDispatch();\n\n    const halfSize = size / 2;\n\n    const style = (side: Side, direction: Direction): React.CSSProperties => {\n        return {\n            width: cubicleSize,\n            transform: `${side} translate3d(0, ${halfSize}px, ${halfSize}px) rotateX(-90deg) translateY(-${\n                cubicleSize / 2\n            }px) rotateZ(${90 * direction}deg) translateY(-${\n                cubicleSize * (cubeDimension / 2 - 0.5)\n            }px)`,\n            cursor: 'pointer',\n            position: 'absolute',\n        };\n    };\n\n    const yStyle = (side: Side, direction: Direction): React.CSSProperties => ({\n        width: cubicleSize,\n        transform: `${side} rotateZ(${90 * direction}deg) translate3d(0, -${\n            cubicleSize * (cubeDimension / 2 + 0.5)\n        }px, ${halfSize}px)`,\n        cursor: 'pointer',\n        position: 'absolute',\n    });\n\n    const arrow = (\n        <svg className=\"cube-arrows-svg\" viewBox=\"-50 -50 100 100\">\n            <Arrow className=\"cube-arrow\" />\n        </svg>\n    );\n\n    const rotateWithNotation = (notation: string) => {\n        const parser = makeNotationParser(cubeDimension).rotationCommands;\n        const command = parser.tryParse(notation);\n        dispatch(playerActions.play(command));\n    };\n\n    return (\n        <div className=\"display-contents\">\n            <div\n                onClick={() => rotateWithNotation(\"Z'\")}\n                style={style(Side.FRONT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('Z')}\n                style={style(Side.FRONT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation(\"X'\")}\n                style={style(Side.RIGHT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('X')}\n                style={style(Side.RIGHT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation(\"Y'\")}\n                style={yStyle(Side.RIGHT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('Y')}\n                style={yStyle(Side.FRONT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(CubeArrows);\n","import P from 'parsimmon';\nimport {\n    SingleRotationCommand,\n    double,\n    letterToAxis,\n    letterToRotation,\n    letterToSlices,\n    LoopedRotationCommands,\n    prime,\n    RotationCommand,\n    wide,\n} from './RotationCommand';\nimport { range, sample, sampleSize } from 'lodash';\n\n/**\n * Creates a cube notation parser that knows about the used cubeDimension\n *\n * Possible syntax versions should be roughly equal to:\n *\n * 1: [LRUDFBlrudfbMESXYZmesxyz]'?2?\n * 2: \\d+[LRUDFBlrudfb]w?'?2?\n * 3: \\[\\d+(,\\d)*\\][LRUDFBlrudfb]'?2?\n *\n * and groups and loops of:\n *\n * 4: \\(((1|2|3|4)[ ,])*\\)\\d*\n *\n * @param cubeDimension\n */\nexport const makeNotationParser = (cubeDimension: number) =>\n    P.createLanguage<{\n        separator: string;\n\n        comma: string;\n\n        lParenthesis: string;\n        rParenthesis: string;\n        lBracket: string;\n        rBracket: string;\n\n        wide: boolean;\n        prime: boolean;\n        double: boolean;\n\n        number: number;\n        numberInDimension: number;\n\n        slices: number[];\n\n        sliceableLetter: string;\n        notSliceableLetter: string;\n        letter: string;\n\n        simpleCommand: SingleRotationCommand;\n        slicedCommand: SingleRotationCommand;\n        loop: LoopedRotationCommands;\n\n        rotationCommands: RotationCommand[];\n    }>({\n        separator: (r) =>\n            P.alt(\n                P.optWhitespace.then(\n                    P.alt(\n                        r.comma,\n                        P.lookahead(r.lParenthesis.or(r.rParenthesis)),\n                        P.eof\n                    )\n                ),\n                P.whitespace.atLeast(1)\n            ).result(''),\n\n        comma: () => P.string(',').desc(','),\n\n        lParenthesis: () => P.string('(').desc('('),\n        rParenthesis: () => P.string(')').desc(')'),\n        lBracket: () => P.string('[').desc('['),\n        rBracket: () => P.string(']').desc(']'),\n\n        wide: () => P.regexp(/[W]/i).result(true).fallback(false),\n\n        prime: () => P.string(\"'\").desc(\"'\").result(true).fallback(false),\n\n        double: () => P.string('2').desc('2').result(true).fallback(false),\n\n        number: () => P.regexp(/\\d+/).map(Number).desc('number'),\n        numberInDimension: () =>\n            P((input, i) => {\n                const matched = input.substr(i).match(/^\\d+/);\n                if (matched) {\n                    const numStr = matched[0];\n                    const num = Number(numStr);\n                    const isInRange = num > 0 && num <= cubeDimension;\n\n                    if (isInRange) {\n                        return P.makeSuccess(i + numStr.length, num);\n                    }\n                }\n\n                return P.makeFailure(i, `1-${cubeDimension}`);\n            }),\n\n        slices: (r) =>\n            r.numberInDimension\n                .trim(P.optWhitespace)\n                .sepBy1(r.comma)\n                .map((nums) => nums.sort())\n                .wrap(r.lBracket, r.rBracket),\n\n        sliceableLetter: () => P.regexp(/[LRUDFB]/i),\n        notSliceableLetter: () => P.regexp(/[MESXYZ]/i),\n        letter: (r) => P.alt(r.sliceableLetter, r.notSliceableLetter),\n\n        simpleCommand: (r) =>\n            P.seq(r.letter, r.prime, r.double).map(\n                ([letter, hasPrime, hasDouble]) => ({\n                    axis: letterToAxis(letter),\n                    rotation: double(hasDouble)(\n                        prime(hasPrime)(letterToRotation(letter))\n                    ),\n                    slices: letterToSlices(letter, cubeDimension),\n                })\n            ),\n        slicedCommand: (r) =>\n            P.seq(\n                P.alt(\n                    P.seq(\n                        r.numberInDimension.map((num) => [num]),\n                        r.sliceableLetter,\n                        r.wide\n                    ),\n                    P.seq(r.slices, r.sliceableLetter, P.succeed(false))\n                ),\n                r.prime,\n                r.double\n            ).map(([[slices, letter, hasWide], hasPrime, hasDouble]) => ({\n                axis: letterToAxis(letter),\n                rotation: double(hasDouble)(\n                    prime(hasPrime)(letterToRotation(letter))\n                ),\n                slices: wide(hasWide)(letter, slices, cubeDimension),\n            })),\n        loop: (r) =>\n            P.seq(\n                r.rotationCommands.wrap(r.lParenthesis, r.rParenthesis),\n                r.number.fallback(1)\n            ).map(([commands, iterations]) => ({\n                commands,\n                iterations,\n            })),\n        rotationCommands: (r) =>\n            P.optWhitespace\n                .then(P.alt(r.simpleCommand, r.slicedCommand, r.loop))\n                .skip(r.separator)\n                .many(),\n    });\n\nexport const createRandomNotation = (cubeDimension: number): string => {\n    const letters = 'LRUDFB'.split('');\n    const loops = 20;\n\n    let moves = '';\n    let prevLetter = '';\n    let prevIsPrime = false;\n\n    const randomLetter = (slices: number[]) => {\n        let letter = '';\n        let isPrime = false;\n\n        do {\n            const slice = sample(slices) ?? '';\n            letter = slice + sample(letters)!;\n            isPrime = sample([true, false])!;\n        } while (prevLetter === letter && prevIsPrime !== isPrime);\n\n        prevLetter = letter;\n        prevIsPrime = isPrime;\n        moves += letter + (isPrime ? \"' \" : ' ');\n    };\n\n    if (cubeDimension > 3) {\n        const slices = range(2, cubeDimension);\n        const length = range(0, slices.length);\n        range(loops).forEach(() =>\n            randomLetter(sampleSize(slices, sample(length)))\n        );\n    } else {\n        range(loops).forEach(() => randomLetter([]));\n    }\n\n    return moves;\n};\n","import React from 'react';\nimport { useRedux } from '../states/States';\nimport { fromScale, fromTranslation, multiply, toCss } from '../utils/Matrix4';\nimport Cubicle from './Cubicle';\nimport './RubiksCube.scss';\nimport Maybe from '../utils/Maybe';\nimport { rotationCommandToCssRotation } from './algorithms/RotationCommand';\nimport createClassName from '../utils/createClassName';\nimport { canApplyRotationCommand } from './CubeUtils';\nimport CubeArrows from './CubeArrows';\nimport { PlayerStatus } from '../states/player/PlayerState';\n\nconst RubiksCube: React.FunctionComponent = () => {\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const cubeSize = useRedux((state) => state.cube.size);\n    const scale = useRedux((state) => state.cube.scale);\n    const rotation = useRedux((state) => state.cube.rotation);\n    const isStopped =\n        useRedux((state) => state.player.status) === PlayerStatus.STOPPED;\n\n    const cubicleSize = cubeSize / cubeDimension;\n\n    const style: React.CSSProperties = {\n        width: cubeSize,\n        height: cubeSize,\n        transform: toCss(multiply(rotation, fromScale(scale))),\n    };\n\n    const positionCorrectionStyle = (): React.CSSProperties => {\n        const offset = (cubeSize * (cubeDimension - 1)) / (2 * cubeDimension);\n        const mat = fromTranslation(offset, offset, 0);\n        return {\n            transform: toCss(mat),\n            transformStyle: 'preserve-3d',\n        };\n    };\n\n    return (\n        <div className=\"app__cube\">\n            <div\n                className={createClassName('rubiks-cube', {\n                    'rubiks-cube--is-transitioning': !isStopped,\n                })}\n                style={style}\n            >\n                <div style={positionCorrectionStyle()}>\n                    <Cubicles cubicleSize={cubicleSize} />\n                    {cubeDimension > 1 && (\n                        <CubeArrows\n                            cubeDimension={cubeDimension}\n                            size={cubeSize}\n                            cubicleSize={cubicleSize}\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\ninterface CubiclesProps {\n    cubicleSize: number;\n}\n\nconst Cubicles: React.FunctionComponent<CubiclesProps> = React.memo(\n    ({ cubicleSize }) => {\n        const cubicles = useRedux((state) => state.cube.cubicles);\n        const rotationDuration = useRedux(\n            (state) => state.cube.rotationDuration\n        );\n        const currentRotationCommand = Maybe.of(\n            useRedux((state) => state.player.currentCommand)\n        );\n\n        return (\n            <div className=\"display-contents\">\n                {cubicles.map(({ id, faces, transform, axis }) => {\n                    const animatedTransform = currentRotationCommand\n                        .filter((command) =>\n                            canApplyRotationCommand(axis, command)\n                        )\n                        .map(rotationCommandToCssRotation)\n                        .unwrapOr('rotate(0)');\n\n                    return (\n                        <Cubicle\n                            key={id.join(',')}\n                            axis={axis}\n                            faces={faces}\n                            animatedTransform={animatedTransform}\n                            transform={transform}\n                            size={cubicleSize}\n                            rotationDuration={rotationDuration}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n);\n\nexport default RubiksCube;\n","import { useCallback, useState } from 'react';\nimport { isFunction } from 'lodash';\n\nfunction useComplexState<S>(\n    initialState: S | (() => S)\n): [S, (newState: Partial<S> | ((prevState: S) => Partial<S>)) => void] {\n    const [state, setState] = useState(initialState);\n    const updateState = useCallback(\n        (newState: Partial<S> | ((prevState: S) => Partial<S>)) =>\n            setState(prevState => ({\n                ...prevState,\n                ...(isFunction(newState) ? newState(prevState) : newState)\n            })),\n        []\n    );\n    return [state, updateState];\n}\n\nexport default useComplexState;\n","import React from 'react';\nimport './ColorPicker.scss';\nimport { ChromePicker } from 'react-color';\nimport { useRedux } from '../states/States';\nimport { Color } from '../cube/CubeTypes';\nimport { useDispatch } from 'react-redux';\nimport { cubeActions } from '../states/cube/CubeActions';\nimport useComplexState from '../hooks/useComplexState';\nimport { Button, ClickAwayListener } from '@mui/material';\nimport createClassName from '../utils/createClassName';\n\ninterface State {\n    selectedColor?: Color;\n    pickerColor: string;\n}\n\nconst ColorPicker: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const colorMap = useRedux((state) => state.cube.colorMap);\n\n    const [{ selectedColor, pickerColor }, setState] = useComplexState<State>(\n        () => ({\n            selectedColor: undefined,\n            pickerColor: '',\n        })\n    );\n\n    const resetColors = () => {\n        dispatch(cubeActions.resetColors());\n    };\n\n    const colors = Object.entries(colorMap)\n        .filter(\n            ([key, _]) => key !== Color.DEFAULT && key !== Color.TRANSPARENT\n        )\n        .map(([key, value]: [Color, string]) => (\n            <div\n                key={key}\n                className={createClassName('color-group__color-square', {\n                    'color-group__color-square--selected':\n                        selectedColor === key,\n                })}\n                style={{\n                    backgroundColor: value,\n                }}\n                onClick={() =>\n                    setState({ selectedColor: key, pickerColor: value })\n                }\n            />\n        ));\n\n    return (\n        <div className=\"color-picker-component\">\n            <ClickAwayListener\n                onClickAway={() => {\n                    if (selectedColor) {\n                        setState({ selectedColor: undefined });\n                    }\n                }}\n            >\n                <div>\n                    <div className=\"color-group\">{colors}</div>\n                    {selectedColor && (\n                        <div className=\"color-picker\">\n                            <ChromePicker\n                                disableAlpha={true}\n                                color={pickerColor}\n                                onChange={(color) =>\n                                    setState({ pickerColor: color.hex })\n                                }\n                                onChangeComplete={(color) =>\n                                    dispatch(\n                                        cubeActions.setColor(\n                                            selectedColor,\n                                            color.hex\n                                        )\n                                    )\n                                }\n                            />\n                        </div>\n                    )}\n                </div>\n            </ClickAwayListener>\n            <Button size={'small'} onClick={resetColors}>\n                Reset Colors\n            </Button>\n        </div>\n    );\n};\n\nexport default React.memo(ColorPicker);\n","import React, { useMemo } from 'react';\nimport { Typography, Slider, List, ListItem } from '@mui/material';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport { cubeActions } from '../states/cube/CubeActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\nimport ColorPicker from './ColorPicker';\n\nconst Settings: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const scale = useRedux((state) => state.cube.scale);\n    const rotationAnimationSpeed = useRedux(\n        (state) => state.cube.rotationDuration\n    );\n    const playerStatus = useRedux((state) => state.player.status);\n\n    return (\n        <List disablePadding={true} dense={true} className=\"interface-list\">\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"cube-dimension-slider\">\n                    Cube dimension\n                </Typography>\n                <Slider\n                    aria-labelledby=\"cube-dimension-slider\"\n                    valueLabelDisplay=\"auto\"\n                    marks={true}\n                    step={1}\n                    min={1}\n                    max={5}\n                    defaultValue={useMemo(() => cubeDimension, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(cubeActions.setCubeDimension(value as number))\n                    }\n                    disabled={playerStatus !== PlayerStatus.STOPPED}\n                />\n            </ListItem>\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"scale-slider\">Scale</Typography>\n                <Slider\n                    aria-labelledby=\"scale-slider\"\n                    valueLabelDisplay=\"auto\"\n                    marks={true}\n                    step={0.1}\n                    min={0.2}\n                    max={2.0}\n                    defaultValue={useMemo(() => scale, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(cubeActions.setCubeScale(value as number))\n                    }\n                />\n            </ListItem>\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"animation-duration-slider\">\n                    Animation duration\n                </Typography>\n                <Slider\n                    aria-labelledby=\"animation-duration-slider\"\n                    valueLabelDisplay=\"auto\"\n                    min={100}\n                    max={2000}\n                    step={50}\n                    defaultValue={useMemo(() => rotationAnimationSpeed, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(\n                            cubeActions.setRotationAnimationSpeed(\n                                value as number\n                            )\n                        )\n                    }\n                />\n            </ListItem>\n            <ListItem>\n                <ColorPicker />\n            </ListItem>\n        </List>\n    );\n};\n\nexport default React.memo(Settings);\n","import { Color } from '../CubeTypes';\nimport { AlgorithmTree } from './AlgorithmTree';\n\nconst { YELLOW, ORANGE, RED, GREEN, BLUE, DEFAULT, TRANSPARENT } = Color;\n\nconst Look2CFOP: AlgorithmTree = {\n    name: '2 Look CFOP',\n    groups: [\n        {\n            name: 'OLL',\n            groups: [\n                {\n                    name: 'Edges',\n                    algorithms: [\n                        {\n                            name: 'Dot',\n                            notation: \"F (R U R' U') F' f (R U R' U') f'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'L',\n                            notation: \"f (R U R' U') f'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'Line',\n                            notation: \"F (R U R' U') F'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Corners',\n                    groups: [\n                        {\n                            name: 'No Corners solved',\n                            algorithms: [\n                                {\n                                    name: 'H',\n                                    notation: \"F (R U R' U')3 F'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Pi',\n                                    notation: \"R U2 (R2 U' R2 U' R2) U2 R\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '1 Corner solved',\n                            algorithms: [\n                                {\n                                    name: 'Sune',\n                                    notation: \"R U R' U R U2 R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Anti-Sune',\n                                    notation: \"L' U' L U' L' U2 L\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '2 Corners solved',\n                            algorithms: [\n                                {\n                                    name: 'L',\n                                    notation: \"x (R' U R D') (R' U' R D) x'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'T',\n                                    notation: \"x (L U R' U') (L' U R U') x'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'U',\n                                    notation: \"R2 D R' U2 R D' R' U2 R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Parity',\n                    algorithms: [\n                        {\n                            name: 'Edge flipped',\n                            notation:\n                                \"(2R2 B2 U2) (2L U2) (2R' U2) (2R U2) (F2 2R F2) (2L' B2 2R2)\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            name: 'PLL',\n            groups: [\n                {\n                    name: 'Corners',\n                    algorithms: [\n                        {\n                            name: 'Diagonal',\n                            notation:\n                                \"(F R U' R' U' R U R' F') (R U R' U' R' F R F')\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [DEFAULT, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [DEFAULT, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'Adjacent',\n                            notation:\n                                \"(R U R' U' R' F) R2 (U' R' U' R U R' F')\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [ORANGE, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [ORANGE, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Edges',\n                    groups: [\n                        {\n                            name: '3 Edges',\n                            algorithms: [\n                                {\n                                    name: 'Right to Left',\n                                    notation: \"R U' R U R U R U' R' U' R2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            GREEN,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            ORANGE,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            ORANGE,\n                                        ],\n                                        [\n                                            ORANGE,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            DEFAULT,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Left to Right',\n                                    notation: \"R2 U R U R' U' R' U' R' U R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            GREEN,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            RED,\n                                        ],\n                                        [RED, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            RED,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            DEFAULT,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '4 Edges',\n                            algorithms: [\n                                {\n                                    name: 'Cross',\n                                    notation: \"M2 U' M2 U2 M2 U' M2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            BLUE,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [RED, YELLOW, YELLOW, YELLOW, ORANGE],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            GREEN,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Diagonal',\n                                    notation: \"M' U' M2 U' M2 U' M' U2 M2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            ORANGE,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [GREEN, YELLOW, YELLOW, YELLOW, BLUE],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            RED,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Parity',\n                    algorithms: [\n                        {\n                            name: 'Corners / Edges swapped',\n                            notation: '2R2 U2 2R2 u2 2R2 2U2',\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    GREEN,\n                                    BLUE,\n                                    BLUE,\n                                    GREEN,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    BLUE,\n                                    GREEN,\n                                    GREEN,\n                                    BLUE,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};\n\nexport default Look2CFOP;\n","import React from 'react';\n\ninterface IStartConfigurationProps {\n    configuration: string[][];\n    transparentColor: string;\n}\n\nconst StartConfiguration: React.FunctionComponent<IStartConfigurationProps> = ({\n    configuration,\n    transparentColor,\n}) => (\n    <div className=\"start-configuration\">\n        {configuration.flatMap((row, rowIndex) =>\n            row.map((color, colorIndex) => (\n                <React.Fragment key={`${rowIndex}-${colorIndex}`}>\n                    {color !== transparentColor && (\n                        <div\n                            className=\"start-configuration__face\"\n                            style={{\n                                backgroundColor: color,\n                                gridRow: rowIndex + 1,\n                                gridColumn: colorIndex + 1,\n                            }}\n                        />\n                    )}\n                </React.Fragment>\n            ))\n        )}\n    </div>\n);\n\nexport default React.memo(StartConfiguration);\n","import { Color } from '../CubeTypes';\n\nexport interface AlgorithmGroupGroup {\n    name: string;\n    groups: AlgorithmTree[];\n}\n\nexport interface AlgorithmGroup {\n    name: string;\n    algorithms: Algorithm[];\n}\n\nexport interface Algorithm {\n    name: string;\n    notation: string;\n    startConfiguration?: Color[][];\n}\n\nexport type AlgorithmTree = AlgorithmGroupGroup | AlgorithmGroup;\n\nconst isAlgorithmGroup = (tree: AlgorithmTree): tree is AlgorithmGroup =>\n    (tree as AlgorithmGroup).algorithms !== undefined;\n\nconst joinNames = (a: string, b: string): string =>\n    a === '' ? b : `${a} / ${b}`;\n\nexport const flattenTree = (\n    tree: AlgorithmTree,\n    name = ''\n): AlgorithmGroup[] => {\n    if (isAlgorithmGroup(tree)) {\n        return [{ ...tree, name: joinNames(name, tree.name) }];\n    } else {\n        return tree.groups.flatMap((group) =>\n            flattenTree(group, joinNames(name, tree.name))\n        );\n    }\n};\n","import React, { useState } from 'react';\nimport {\n    List,\n    ListItemText,\n    ListItem,\n    ListSubheader,\n    Divider,\n    TextField,\n} from '@mui/material';\nimport Look2CFOP from '../cube/algorithms/CFOP';\nimport Misc from '../cube/algorithms/Misc';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport StartConfiguration from './StartConfiguration';\nimport { playerActions } from '../states/player/PlayerActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\nimport { AlgorithmGroup, flattenTree } from '../cube/algorithms/AlgorithmTree';\n\nexport const categories = [Look2CFOP, Misc].flatMap((algorithm) =>\n    flattenTree(algorithm)\n);\n\nconst filterCategories = (searchValue: string): AlgorithmGroup[] =>\n    categories\n        .map<AlgorithmGroup | undefined>((group) => {\n            if (group.name.toLocaleLowerCase().includes(searchValue)) {\n                return group;\n            }\n\n            const algorithms = group.algorithms.filter((algorithm) =>\n                algorithm.name.toLocaleLowerCase().includes(searchValue)\n            );\n\n            if (algorithms.length === 0) {\n                return;\n            }\n\n            return {\n                ...group,\n                algorithms,\n            };\n        })\n        .filter((group): group is AlgorithmGroup => group !== undefined);\n\nconst Algorithms: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const playerStatus = useRedux((state) => state.player.status);\n    const colorMap = useRedux((state) => state.cube.colorMap);\n\n    const [filteredCategories, setFilteredCategories] = useState(categories);\n    const filter = (event: React.ChangeEvent<HTMLInputElement>) =>\n        setFilteredCategories(\n            filterCategories(event.target.value.toLocaleLowerCase())\n        );\n\n    return (\n        <List\n            disablePadding={true}\n            dense={true}\n            className=\"interface-list interface-algorithm-list\"\n        >\n            <ListSubheader className=\"interface-algorithm-list__filer\">\n                <TextField\n                    label=\"Search\"\n                    variant=\"standard\"\n                    fullWidth={true}\n                    onChange={filter}\n                />\n            </ListSubheader>\n            {filteredCategories.map((group, index) => (\n                <React.Fragment key={group.name + index}>\n                    <ListSubheader className=\"interface-list__item interface-algorithm-list__header\">\n                        <Divider />\n                        {group.name}\n                        <Divider />\n                    </ListSubheader>\n                    {group.algorithms.map((algorithm) => (\n                        <ListItem\n                            key={algorithm.name + index}\n                            className=\"interface-list__item--moves\"\n                            button={true}\n                            onClick={() =>\n                                dispatch(\n                                    playerActions.updateNotation(\n                                        algorithm.notation!\n                                    )\n                                )\n                            }\n                            disabled={playerStatus !== PlayerStatus.STOPPED}\n                        >\n                            {algorithm.startConfiguration && (\n                                <StartConfiguration\n                                    configuration={algorithm.startConfiguration.map(\n                                        (row) =>\n                                            row.map((color) => colorMap[color])\n                                    )}\n                                    transparentColor={colorMap.transparent}\n                                />\n                            )}\n                            <ListItemText\n                                primary={algorithm.name}\n                                secondary={algorithm.notation}\n                            />\n                        </ListItem>\n                    ))}\n                </React.Fragment>\n            ))}\n        </List>\n    );\n};\n\nexport default Algorithms;\n","import { AlgorithmTree } from './AlgorithmTree';\n\nconst Misc: AlgorithmTree = {\n    name: 'Misc',\n    algorithms: [\n        {\n            name: 'Sexy',\n            notation: \"R U R' U'\",\n        },\n    ],\n};\n\nexport default Misc;\n","import React from 'react';\nimport { ExpandMore } from '@mui/icons-material';\nimport {\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n    Typography,\n    ListItem,\n} from '@mui/material';\n\ninterface ICategoryProps {\n    isOpen: boolean;\n    setMenu: () => void;\n    title: string;\n    children: React.ReactNode;\n}\n\nconst Category: React.FunctionComponent<ICategoryProps> = ({\n    title,\n    isOpen,\n    setMenu,\n    children,\n}) => (\n    <ListItem className=\"interface-list__item\">\n        <Accordion\n            expanded={isOpen}\n            TransitionProps={{ unmountOnExit: true }}\n            className=\"interface-category\"\n        >\n            <AccordionSummary\n                onClick={setMenu}\n                expandIcon={<ExpandMore />}\n                className=\"interface-category__summary\"\n            >\n                <Typography>{title}</Typography>\n            </AccordionSummary>\n            <AccordionDetails className=\"interface-category__details\">\n                {children}\n            </AccordionDetails>\n        </Accordion>\n    </ListItem>\n);\n\nexport default Category;\n","import React, { useCallback } from 'react';\nimport { Chip, IconButton, TextField, Typography } from '@mui/material';\nimport './Player.scss';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport {\n    Pause,\n    PlayArrow,\n    Refresh,\n    Shuffle,\n    SkipNext,\n    Stop,\n} from '@mui/icons-material';\nimport { playerActions } from '../states/player/PlayerActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\nimport { isError, isOk } from '../cube/algorithms/RotationCommand';\nimport { cubeActions } from '../states/cube/CubeActions';\nimport { createRandomNotation } from '../cube/algorithms/Parser';\nimport { Failure } from 'parsimmon';\n\nconst Player: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const playerNotation = useRedux((state) => state.player.notation);\n    const playerStatus = useRedux((state) => state.player.status);\n    const rotationCommands = useRedux((state) => state.player.rotationCommands);\n\n    const updateNotation = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) =>\n            dispatch(playerActions.updateNotation(event.target.value)),\n        []\n    );\n\n    const hasParseError = isError(rotationCommands);\n    const isNotationEmpty = playerNotation.length === 0;\n    const isStopped = playerStatus === PlayerStatus.STOPPED;\n\n    const onPlay = () => {\n        if (playerStatus === PlayerStatus.STOPPED && isOk(rotationCommands)) {\n            dispatch(playerActions.play(rotationCommands.value));\n        } else if (playerStatus === PlayerStatus.PAUSED) {\n            dispatch(playerActions.unPause());\n        }\n    };\n    const onPause = () => dispatch(playerActions.pause());\n    const onStop = () => dispatch(playerActions.stop());\n\n    const onJumpToEnd = () => {\n        if (isOk(rotationCommands)) {\n            dispatch(cubeActions.applyRotationCommands(rotationCommands.value));\n        }\n    };\n\n    const onShuffle = () =>\n        dispatch(\n            playerActions.updateNotation(createRandomNotation(cubeDimension))\n        );\n\n    const onRefresh = () => dispatch(cubeActions.resetCube());\n\n    return (\n        <div className=\"algorithm-player\">\n            <TextField\n                label=\"Algorithm\"\n                variant=\"standard\"\n                fullWidth={true}\n                value={playerNotation}\n                onChange={updateNotation}\n                disabled={!isStopped}\n                error={hasParseError}\n                spellCheck={false}\n                multiline={true}\n            />\n            {isError(rotationCommands) && (\n                <NotationError\n                    notation={playerNotation}\n                    error={rotationCommands}\n                />\n            )}\n            <div className=\"algorithm-player__buttons\">\n                <div>\n                    {playerStatus === PlayerStatus.PLAYING ? (\n                        <IconButton onClick={onPause}>\n                            <Pause />\n                        </IconButton>\n                    ) : (\n                        <IconButton\n                            onClick={onPlay}\n                            disabled={isNotationEmpty || hasParseError}\n                        >\n                            <PlayArrow />\n                        </IconButton>\n                    )}\n                    <IconButton onClick={onStop} disabled={isStopped}>\n                        <Stop />\n                    </IconButton>\n                    <IconButton\n                        onClick={onJumpToEnd}\n                        disabled={\n                            !isStopped || isNotationEmpty || hasParseError\n                        }\n                    >\n                        <SkipNext />\n                    </IconButton>\n                </div>\n                <div>\n                    <IconButton onClick={onShuffle} disabled={!isStopped}>\n                        <Shuffle />\n                    </IconButton>\n                    <IconButton onClick={onRefresh} disabled={!isStopped}>\n                        <Refresh />\n                    </IconButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\ninterface NotationErrorProps {\n    notation: string;\n    error: Failure;\n}\n\nconst NotationError: React.FunctionComponent<NotationErrorProps> = ({\n    notation,\n    error,\n}) => (\n    <>\n        <Typography className=\"notation-error\">\n            <span className=\"notation-error__text\">\n                {notation.substring(0, error.index.offset)}\n            </span>\n            <span className=\"notation-error__letter\">\n                {notation.substring(error.index.offset, error.index.offset + 1)}\n            </span>\n        </Typography>\n\n        <div className=\"notation-error__chips\">\n            {error.expected.map((errorMsg) => (\n                <Chip\n                    className=\"notation-error__chip\"\n                    key={errorMsg}\n                    color=\"error\"\n                    size=\"small\"\n                    label={errorMsg}\n                />\n            ))}\n        </div>\n    </>\n);\n\nexport default React.memo(Player);\n","import React, { useCallback, useState } from 'react';\nimport { List, ListItem } from '@mui/material';\nimport Settings from './Settings';\nimport './Interface.scss';\nimport Algorithms from './Algorithms';\nimport Category from './Category';\nimport Player from './Player';\n\nenum Menu {\n    ALGORITHMS = 'ALGORITHMS',\n    SETTINGS = 'SETTINGS',\n    NONE = 'NONE',\n}\n\nconst Interface: React.FunctionComponent = () => {\n    const [openedMenu, setOpenedMenu] = useState(Menu.SETTINGS);\n    const setMenu = (menu: Menu) =>\n        setOpenedMenu((prevMenu) => (prevMenu === menu ? Menu.NONE : menu));\n\n    return (\n        <div className=\"app__interface\">\n            <List>\n                <ListItem className=\"interface-list__item\">\n                    <Player />\n                </ListItem>\n                <Category\n                    isOpen={openedMenu === Menu.ALGORITHMS}\n                    setMenu={useCallback(() => setMenu(Menu.ALGORITHMS), [])}\n                    title=\"Algorithms\"\n                >\n                    <Algorithms />\n                </Category>\n                <Category\n                    isOpen={openedMenu === Menu.SETTINGS}\n                    setMenu={useCallback(() => setMenu(Menu.SETTINGS), [])}\n                    title=\"Settings\"\n                >\n                    <Settings />\n                </Category>\n            </List>\n        </div>\n    );\n};\n\nexport default Interface;\n","import React, { useEffect } from 'react';\nimport RubiksCube from './cube/RubiksCube';\nimport Interface from './interface/Interface';\nimport './App.scss';\nimport { useDispatch } from 'react-redux';\nimport { cubeActions } from './states/cube/CubeActions';\n\nconst App: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(cubeActions.resetCube());\n    }, []);\n\n    return (\n        <div className=\"app\">\n            <Interface />\n            <RubiksCube />\n        </div>\n    );\n};\n\nexport default App;\n","import { ofType } from 'redux-observable';\r\nimport { cubeActions } from './CubeActions';\r\nimport { map, withLatestFrom } from 'rxjs/operators';\r\nimport { AppEpic } from '../States';\r\nimport { generateCubicles } from '../../cube/CubeUtils';\r\nimport { EMPTY } from 'rxjs';\r\nimport { COLOR_MAP } from '../LocalStorage';\r\n\r\nconst updateCubicles: AppEpic = (action$, state$) =>\r\n    action$.pipe(\r\n        ofType(cubeActions.setCubeDimension.type, cubeActions.resetCube.type),\r\n        withLatestFrom(state$),\r\n        map(([_, state]) =>\r\n            cubeActions.updateCubicles(\r\n                generateCubicles(\r\n                    state.cube.size / state.cube.dimension,\r\n                    state.cube.gapFactor,\r\n                    state.cube.dimension\r\n                )\r\n            )\r\n        )\r\n    );\r\n\r\nconst saveColors: AppEpic = (action$, state$) => {\r\n    action$\r\n        .pipe(\r\n            ofType(cubeActions.setColor.type, cubeActions.resetColors.type),\r\n            withLatestFrom(state$)\r\n        )\r\n        .subscribe(([_, state]) => {\r\n            const colorMap = state.cube.colorMap;\r\n            localStorage.setItem(COLOR_MAP, JSON.stringify(colorMap));\r\n        });\r\n\r\n    return EMPTY;\r\n};\r\n\r\nexport const cubeEpics = [updateCubicles, saveColors];\r\n","import { AppEpic } from '../States';\r\nimport { playerActions } from './PlayerActions';\r\nimport {\r\n    concatMap,\r\n    delay,\r\n    filter,\r\n    first,\r\n    map,\r\n    mapTo,\r\n    withLatestFrom,\r\n} from 'rxjs/operators';\r\nimport { makeNotationParser } from '../../cube/algorithms/Parser';\r\nimport { cubeActions } from '../cube/CubeActions';\r\nimport { fromEvent, merge, Subject } from 'rxjs';\r\nimport {\r\n    isLoopedRotationCommands,\r\n    RotationCommand,\r\n    SingleRotationCommand,\r\n} from '../../cube/algorithms/RotationCommand';\r\nimport Maybe from '../../utils/Maybe';\r\nimport { PlayerStatus } from './PlayerState';\r\nimport { Action } from 'redux';\r\nimport { ofType } from 'redux-observable';\r\n\r\nconst parseNotation: AppEpic = (action$, state$) =>\r\n    action$.pipe(\r\n        ofType(\r\n            cubeActions.setCubeDimension.type,\r\n            playerActions.updateNotation.type\r\n        ),\r\n        withLatestFrom(state$),\r\n        map(([_, state]) => {\r\n            const parser = makeNotationParser(state.cube.dimension);\r\n            return parser.rotationCommands.parse(state.player.notation);\r\n        }),\r\n        map(playerActions.parsedNotation)\r\n    );\r\n\r\nfunction* singleRotationCommandGenerator(\r\n    rotationCommands: RotationCommand[]\r\n): Generator<SingleRotationCommand> {\r\n    for (const rotationCommand of rotationCommands) {\r\n        if (isLoopedRotationCommands(rotationCommand)) {\r\n            for (let i = 0; i < rotationCommand.iterations; i++) {\r\n                yield* singleRotationCommandGenerator(rotationCommand.commands);\r\n            }\r\n        } else {\r\n            yield rotationCommand;\r\n        }\r\n    }\r\n}\r\n\r\nconst player: AppEpic = (action$, state$) => {\r\n    const play$ = action$.pipe(filter(playerActions.play.match));\r\n    const unPause$ = action$.pipe(filter(playerActions.unPause.match));\r\n    const stop$ = action$.pipe(filter(playerActions.stop.match));\r\n\r\n    let rotationCommandGenerator: Maybe<Generator<\r\n        SingleRotationCommand,\r\n        SingleRotationCommand\r\n    >> = Maybe.none();\r\n\r\n    const rotationCommandDelay$ = new Subject<boolean>();\r\n\r\n    play$\r\n        .pipe(\r\n            filter((_) => rotationCommandGenerator.isNone()),\r\n            map((it) => it.payload),\r\n            map(singleRotationCommandGenerator)\r\n        )\r\n        .subscribe((it) => {\r\n            rotationCommandGenerator = Maybe.some(it);\r\n            rotationCommandDelay$.next(true);\r\n        });\r\n\r\n    unPause$.subscribe((_) => rotationCommandDelay$.next(true));\r\n\r\n    stop$.subscribe((_) => {\r\n        rotationCommandGenerator = Maybe.none();\r\n    });\r\n\r\n    const setCurrentRotationCommand$ = rotationCommandDelay$.pipe(\r\n        withLatestFrom(state$),\r\n        filter(([_, state]) => state.player.status === PlayerStatus.PLAYING),\r\n        map((_) =>\r\n            rotationCommandGenerator\r\n                .map((it) => it.next().value)\r\n                .map<Action>(playerActions.setCurrentRotationCommand)\r\n                .unwrapOr(playerActions.stop)\r\n        )\r\n    );\r\n\r\n    const transitionEnd$ = fromEvent<TransitionEvent>(\r\n        window,\r\n        'transitionend'\r\n    ).pipe(\r\n        filter(\r\n            (event) =>\r\n                event.propertyName === 'transform' &&\r\n                (event.target as HTMLElement).className.includes(\r\n                    'rubiks-cube__cubicle'\r\n                )\r\n        )\r\n    );\r\n\r\n    const applyRotationCommand$ = action$.pipe(\r\n        filter(playerActions.setCurrentRotationCommand.match),\r\n        map((action) => [action.payload]),\r\n        map(cubeActions.applyRotationCommands),\r\n        concatMap((action) => transitionEnd$.pipe(first(), mapTo(action)))\r\n    );\r\n\r\n    action$\r\n        .pipe(filter(cubeActions.applyRotationCommands.match), delay(10))\r\n        .subscribe((_) => rotationCommandDelay$.next(true));\r\n\r\n    return merge(setCurrentRotationCommand$, applyRotationCommand$);\r\n};\r\n\r\nexport const playerEpics = [parseNotation, player];\r\n","import { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport { cubeEpics } from './cube/CubeEpics';\nimport { AppState } from './States';\nimport { playerEpics } from './player/PlayerEpics';\nimport { Action } from 'redux';\n\nconst epics = combineEpics(...cubeEpics, ...playerEpics);\nexport const epicMiddleWare = createEpicMiddleware<Action, Action, AppState>();\n\nexport const setupEpics = () => epicMiddleWare.run(epics);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { epicMiddleWare, setupEpics } from './Epics';\nimport { reducer } from './States';\n\nconst middleware = [...getDefaultMiddleware({ thunk: false }), epicMiddleWare];\n\nexport const setupStore = () => {\n    const store = configureStore({ reducer, middleware });\n    setupEpics();\n    return store;\n};\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './tsx/App';\nimport { Provider } from 'react-redux';\nimport { setupStore } from './tsx/states/Store';\nimport './tsx/cube/algorithms/Parser';\n\nwindow.addEventListener('load', function load() {\n    window.removeEventListener('load', load);\n\n    const store = setupStore();\n\n    const container = document.getElementById('root');\n    const root = createRoot(container!);\n\n    root.render(\n        <Provider store={store}>\n            <App />\n        </Provider>\n    );\n});\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkrubiks_cube\"] = self[\"webpackChunkrubiks_cube\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [286], () => (__webpack_require__(8698)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","Color","Side","Direction","FaceArrowDirection","actions","setCubeDimension","setCubeScale","setRotationAnimationSpeed","updateCubicles","applyRotationCommands","resetCube","setColor","key","value","payload","resetColors","dot","a","b","zip","map","reduce","add","toRadian","degree","Math","PI","fromTranslation","x","y","z","fromAngleX","radian","sin","cos","fromAngleY","fromScale","scale","transpose","w","multiply","x2","y2","z2","w2","aTransposed","partial","apply","point","mat","row","toCss","flat","join","RotationAxis","isLoopedRotationCommands","rotationCommand","undefined","iterations","loadedColorMap","PlayerStatus","rotationCommandToCssRotation","axis","rotation","X","Y","Z","letterToAxis","letter","toUpperCase","Error","letterToSlices","cubeDimension","range","middleSlice","ceil","letterToRotation","wide","hasWide","slices","slice","prime","hasPrime","hasDouble","sign","isError","result","status","isOk","sideToColor","FRONT","BLUE","BACK","GREEN","LEFT","ORANGE","RIGHT","RED","UP","YELLOW","DOWN","WHITE","sideToTransform","side","cubicleSize","halfCubicleSize","axisToTranslation","cubicleGap","offset","sizeGap","rotateAxis","it","index","round","isOuterFace","canApplyRotationCommand","cubeAxis","includes","applyRotationCommand","cubicles","cubicles2","_","commands","cubicles3","command","cubicle","rotationMat","rotationCommandToMat4","transform","generateFaceArrowCommand","curry","cubicleRotation","originalSide","faceArrow","down","right","rotatedPoint","newCubeAxis","findIndex","abs","COLOR_MAP","defaultColorMap","DEFAULT","TRANSPARENT","initialCubeState","dimension","size","gapFactor","rotationDuration","colorMap","localStorage","getItem","JSON","parse","cubeReducer","builder","addCase","state","action","_action","play","stop","pause","unPause","updateNotation","parsedNotation","setCurrentRotationCommand","initialPlayerState","notation","rotationCommands","STOPPED","playerReducer","PLAYING","PAUSED","currentCommand","reducer","cube","player","useRedux","selector","isClassNameList","arg","classNames","className","hasClasses","Object","keys","filter","length","x1","y1","style","FaceArrow","direction","rotate","onClick","width","height","viewBox","color","generateArrowCommand","useState","isHovered","setHovered","dispatch","backgroundColor","onMouseEnter","onMouseLeave","faces","animatedTransform","transition","id","isSome","isNone","isNil","unwrap","expect","errorMsg","unwrapOr","defaultValue","isFunction","ifIsSome","onSome","ifIsNone","onNone","equals","maybe","contains","some","Maybe","none","of","tryOf","valueFunction","e","this","mapOr","predicate","and","other","or","xor","that","try","makeNotationParser","separator","r","comma","lParenthesis","rParenthesis","desc","lBracket","rBracket","fallback","double","number","Number","numberInDimension","input","i","matched","substr","match","numStr","num","trim","sepBy1","nums","sort","wrap","sliceableLetter","notSliceableLetter","simpleCommand","slicedCommand","loop","skip","many","halfSize","cursor","position","yStyle","arrow","rotateWithNotation","tryParse","ANTI_CLOCKWISE","CLOCKWISE","Cubicles","currentRotationCommand","cubeSize","isStopped","transformStyle","initialState","setState","useCallback","newState","prevState","selectedColor","pickerColor","colors","entries","ClickAwayListener","onClickAway","disableAlpha","onChange","hex","onChangeComplete","Button","rotationAnimationSpeed","playerStatus","List","disablePadding","dense","ListItem","Typography","Slider","valueLabelDisplay","marks","step","min","max","useMemo","onChangeCommitted","event","disabled","name","groups","algorithms","startConfiguration","configuration","transparentColor","flatMap","rowIndex","colorIndex","gridRow","gridColumn","joinNames","flattenTree","tree","isAlgorithmGroup","group","categories","algorithm","filteredCategories","setFilteredCategories","ListSubheader","TextField","label","variant","fullWidth","searchValue","target","toLocaleLowerCase","Divider","button","transparent","ListItemText","primary","secondary","title","isOpen","setMenu","children","Accordion","expanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","ExpandMore","AccordionDetails","NotationError","error","substring","expected","Chip","playerNotation","hasParseError","isNotationEmpty","spellCheck","multiline","IconButton","Pause","PlayArrow","Stop","SkipNext","letters","split","moves","prevLetter","prevIsPrime","randomLetter","isPrime","sample","forEach","sampleSize","createRandomNotation","Shuffle","Refresh","Menu","SETTINGS","openedMenu","setOpenedMenu","menu","prevMenu","NONE","ALGORITHMS","useEffect","cubeEpics","action$","state$","pipe","withLatestFrom","indexes","isCubicleVisible","values","generateFace","subscribe","setItem","stringify","E","singleRotationCommandGenerator","playerEpics","play$","unPause$","stop$","rotationCommandGenerator","rotationCommandDelay$","Subject","next","setCurrentRotationCommand$","transitionEnd$","fromEvent","window","propertyName","applyRotationCommand$","concatMap","first","mapTo","delay","merge","epics","combineEpics","epicMiddleWare","createEpicMiddleware","middleware","thunk","addEventListener","load","removeEventListener","store","run","setupStore","container","document","getElementById","render","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","call","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","n","getter","__esModule","d","getPrototypeOf","obj","t","mode","then","ns","create","def","current","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","g","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}