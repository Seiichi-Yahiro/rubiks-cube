{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/tsx/cube/CubeTypes.tsx","webpack:///./src/tsx/states/cube/CubeActions.tsx","webpack:///./src/tsx/utils/Vector4.tsx","webpack:///./src/tsx/utils/Matrix4.tsx","webpack:///./src/tsx/cube/algorithms/RotationCommand.tsx","webpack:///./src/tsx/states/player/PlayerState.tsx","webpack:///./src/tsx/cube/CubeUtils.tsx","webpack:///./src/tsx/states/cube/CubeState.tsx","webpack:///./src/tsx/states/player/PlayerActions.tsx","webpack:///./src/tsx/cube/CubeArrows.tsx","webpack:///./src/tsx/states/States.tsx","webpack:///./src/tsx/utils/createClassName.tsx","webpack:///./src/tsx/cube/Arrow.tsx","webpack:///./src/tsx/cube/FaceArrows.tsx","webpack:///./src/tsx/cube/Face.tsx","webpack:///./src/tsx/cube/Cubicle.tsx","webpack:///./src/tsx/utils/Maybe.tsx","webpack:///./src/tsx/cube/algorithms/Parser.tsx","webpack:///./src/tsx/interface/Interface.tsx","webpack:///./src/tsx/cube/RubiksCube.tsx","webpack:///./src/tsx/interface/Settings.tsx","webpack:///./src/tsx/cube/algorithms/CFOP.tsx","webpack:///./src/tsx/cube/algorithms/Misc.tsx","webpack:///./src/tsx/interface/StartConfiguration.tsx","webpack:///./src/tsx/cube/algorithms/AlgorithmTree.tsx","webpack:///./src/tsx/interface/Algorithms.tsx","webpack:///./src/tsx/interface/Category.tsx","webpack:///./src/tsx/interface/Player.tsx","webpack:///./src/tsx/App.tsx","webpack:///./src/tsx/states/cube/CubeEpics.tsx","webpack:///./src/tsx/states/player/PlayerEpics.tsx","webpack:///./src/tsx/states/Epics.tsx","webpack:///./src/tsx/states/Store.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Color","Side","Direction","FaceArrowDirection","actions","setCubeDimension","setCubeScale","setRotationAnimationSpeed","updateCubicles","applyRotationCommands","resetCube","dot","a","b","map","reduce","toRadian","degree","Math","PI","fromTranslation","x","y","z","fromAngleX","radian","sin","cos","fromAngleY","fromScale","scale","transpose","w","multiply","x2","y2","z2","w2","aTransposed","point","mat","row","toCss","flat","join","RotationAxis","isLoopedRotationCommands","rotationCommand","undefined","iterations","PlayerStatus","rotationCommandToMat4","axis","rotation","X","Y","Z","rotationCommandToCssRotation","letterToAxis","letter","toUpperCase","Error","letterToSlices","cubeDimension","middleSlice","ceil","letterToRotation","wide","hasWide","slices","prime","hasPrime","hasDouble","sign","isError","status","isOk","sideToColor","FRONT","BLUE","BACK","GREEN","LEFT","ORANGE","RIGHT","RED","UP","YELLOW","DOWN","WHITE","sideToTransform","side","cubicleSize","halfCubicleSize","axisToTranslation","cubicleGap","offset","sizeGap","rotateAxis","it","index","round","isOuterFace","generateCubicles","indexes","flatMap","filter","some","isCubicleVisible","id","faces","values","color","DEFAULT","transform","generateFace","canApplyRotationCommand","cubeAxis","includes","applyRotationCommand","cubicles","cubicles2","_","commands","cubicles3","command","cubicle","rotationMat","generateFaceArrowCommand","cubicleRotation","originalSide","faceArrow","down","right","rotatedPoint","newCubeAxis","findIndex","abs","initialCubeState","dimension","size","gapFactor","rotationDuration","cubeReducer","builder","addCase","state","action","payload","play","stop","pause","unPause","updateNotation","parsedNotation","setCurrentRotationCommand","initialPlayerState","notation","rotationCommands","STOPPED","playerReducer","_action","PLAYING","PAUSED","currentCommand","reducer","cube","player","useRedux","selector","isClassNameList","arg","classNames","className","hasClasses","keys","memo","x1","y1","style","FaceArrow","direction","rotate","onClick","width","height","viewBox","generateArrowCommand","isHovered","setHovered","dispatch","backgroundColor","onMouseEnter","onMouseLeave","TRANSPARENT","animatedTransform","transition","isSome","isNone","unwrap","expect","errorMsg","unwrapOr","defaultValue","ifIsSome","onSome","ifIsNone","onNone","equals","maybe","contains","Maybe","none","of","tryOf","valueFunction","e","this","mapOr","predicate","and","other","or","xor","that","try","makeNotationParser","createLanguage","separator","alt","optWhitespace","then","comma","lookahead","lParenthesis","rParenthesis","eof","whitespace","atLeast","string","desc","lBracket","rBracket","chain","succeed","fail","fallback","double","number","num","regexp","Number","numberInDimension","trim","sepBy1","nums","sort","wrap","sliceableLetter","notSliceableLetter","simpleCommand","seq","slicedCommand","loop","skip","many","Menu","halfSize","cursor","position","yStyle","arrow","rotateWithNotation","tryParse","ANTI_CLOCKWISE","CLOCKWISE","cubeSize","currentRotationCommand","isStopped","transformStyle","rotationAnimationSpeed","isDisabled","List","disablePadding","dense","ListItem","Typography","Slider","valueLabelDisplay","marks","step","min","max","onChangeCommitted","event","disabled","groups","algorithms","startConfiguration","configuration","rowIndex","colorIndex","Fragment","gridRow","gridColumn","joinNames","flattenTree","tree","isAlgorithmGroup","group","categories","algorithm","playerStatus","filteredCategories","setFilteredCategories","ListSubheader","TextField","label","fullWidth","onChange","searchValue","target","toLocaleLowerCase","Divider","button","ListItemText","primary","secondary","title","isOpen","setMenu","children","Accordion","expanded","TransitionProps","unmountOnExit","AccordionSummary","expandIcon","AccordionDetails","playerNotation","hasParseError","isNotationEmpty","error","marginTop","marginBottom","expected","Chip","IconButton","Pause","PlayArrow","Stop","SkipNext","letters","split","moves","prevLetter","prevIsPrime","randomLetter","isPrime","forEach","createRandomNotation","Shuffle","Refresh","SETTINGS","openedMenu","setOpenedMenu","menu","prevMenu","NONE","ALGORITHMS","cubeEpics","action$","state$","pipe","type","withLatestFrom","singleRotationCommandGenerator","playerEpics","parse","play$","match","unPause$","stop$","rotationCommandGenerator","rotationCommandDelay$","Subject","subscribe","next","setCurrentRotationCommand$","transitionEnd$","fromEvent","propertyName","applyRotationCommand$","concatMap","first","mapTo","delay","merge","epics","combineEpics","epicMiddleWare","createEpicMiddleware","middleware","thunk","setupStore","store","run","addEventListener","load","removeEventListener","render","document","getElementById"],"mappings":"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A,GACA3G,GACA2G,GACA3G,GACA2G,MAIZ,CACI3N,KAAM,KACNsL,SAAU,6BACV6I,mBAAoB,CAChB,CACIxG,GACAA,GACAA,GACA3G,GACA2G,IAEJ,CACI3G,GACA0B,GACA1B,GACA0B,GACAiF,IAEJ,CACIA,GACA3G,GACAA,GACAA,GACA2G,IAEJ,CACI3G,GACA0B,GACA1B,GACA0B,GACAiF,IAEJ,CACIA,GACAA,GACAA,GACA3G,GACA2G,QAMpB,CACI3N,KAAM,kBACNkU,WAAY,CACR,CACIlU,KAAM,OACNsL,SAAU,mBACV6I,mBAAoB,CAChB,CACIxG,GACA3G,GACA2G,GACAA,GACAA,IAEJ,CACIA,GACAjF,GACA1B,GACA0B,GACA1B,IAEJ,CACI2G,GACA3G,GACAA,GACAA,GACA2G,IAEJ,CACIA,GACA3G,GACAA,GACA0B,GACAiF,IAEJ,CACIA,GACAA,GACAA,GACA3G,GACA2G,MAIZ,CACI3N,KAAM,YACNsL,SAAU,qBACV6I,mBAAoB,CAChB,CACIxG,GACAA,GACAA,GACA3G,GACA2G,IAEJ,CACI3G,GACA0B,GACA1B,GACA0B,GACAiF,IAEJ,CACIA,GACA3G,GACAA,GACAA,GACA2G,IAEJ,CACIA,GACAjF,GACA1B,GACAA,GACA2G,IAEJ,CACIA,GACA3G,GACA2G,GACAA,GACAA,QAMpB,CACI3N,KAAM,mBACNkU,WAAY,CACR,CACIlU,KAAM,IACNsL,SAAU,+BACV6I,mBAAoB,CAChB,CACIxG,GACAA,GACAA,GACAA,GACAA,IAEJ,CACIA,GACA3G,GACAA,GACA0B,GACA1B,IAEJ,CACI2G,GACA3G,GACAA,GACAA,GACA2G,IAEJ,CACIA,GACAjF,GACA1B,GACAA,GACA2G,IAEJ,CACIA,GACA3G,GACA2G,GACAA,GACAA,MAIZ,CACI3N,KAAM,IACNsL,SAAU,+BACV6I,mBAAoB,CAChB,CACIxG,GACA3G,GACA2G,GACAA,GACAA,IAEJ,CACIA,GACAjF,GACA1B,GACAA,GACA2G,IAEJ,CACIA,GACA3G,GACAA,GACAA,GACA2G,IAEJ,CACIA,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","file":"js/app.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([125,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import { Mat4 } from '../utils/Matrix4';\n\nexport type CubeAxis = [number, number, number];\n\nexport enum Color {\n    BLUE = '#3d81f6',\n    GREEN = '#009d54',\n    RED = '#dc422f',\n    ORANGE = '#ff6c00',\n    WHITE = '#ffffff',\n    YELLOW = '#fdcc09',\n    DEFAULT = '#383838',\n    TRANSPARENT = 'transparent',\n}\n\nexport enum Side {\n    FRONT = 'FRONT',\n    BACK = 'BACK',\n    LEFT = 'LEFT',\n    RIGHT = 'RIGHT',\n    UP = 'UP',\n    DOWN = 'DOWN',\n}\n\nexport enum Direction {\n    CLOCKWISE = 1,\n    ANTI_CLOCKWISE = -1,\n}\n\nexport enum FaceArrowDirection {\n    UP = 180,\n    LEFT = 90,\n    RIGHT = -90,\n    DOWN = 0,\n}\n\nexport interface IFace {\n    id: Side;\n    color: Color;\n    transform: Mat4;\n}\n\nexport interface ICubicle {\n    id: CubeAxis;\n    axis: CubeAxis;\n    faces: IFace[];\n    transform: Mat4;\n}\n","import { createAction } from '@reduxjs/toolkit';\nimport { ICubicle } from '../../cube/CubeTypes';\nimport { RotationCommand } from '../../cube/algorithms/RotationCommand';\n\nconst setCubeDimension = createAction<number>('SET_CUBE_DIMENSION');\n\nconst setCubeScale = createAction<number>('SET_CUBE_SCALE');\n\nconst setRotationAnimationSpeed = createAction<number>(\n    'SET_ROTATION_ANIMATION_SPEED'\n);\n\nconst updateCubicles = createAction<ICubicle[]>('UPDATE_CUBICLES');\n\nconst applyRotationCommands = createAction<RotationCommand[]>(\n    'APPLY_ROTATION_COMMANDS'\n);\n\nconst resetCube = createAction('RESET_CUBE');\n\nconst actions = {\n    setCubeDimension,\n    setCubeScale,\n    setRotationAnimationSpeed,\n    updateCubicles,\n    applyRotationCommands,\n    resetCube,\n};\n\nexport { actions as cubeActions };\n","import { zip, add } from 'lodash';\n\nexport type Vec4 = [number, number, number, number];\n\nexport const dot = (a: Vec4, b: Vec4) =>\n    zip(a, b)\n        .map(([a, b]) => (a ?? 0) * (b ?? 0))\n        .reduce(add, 0.0);\n","import { zip, partial } from 'lodash';\nimport { dot, Vec4 } from './Vector4';\n\nexport type Mat4 = [Vec4, Vec4, Vec4, Vec4];\n\nconst toRadian = (degree: number) => (degree / 180) * Math.PI;\n\nexport const identity: Mat4 = [\n    [1.0, 0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0, 0.0],\n    [0.0, 0.0, 1.0, 0.0],\n    [0.0, 0.0, 0.0, 1.0],\n];\n\nexport const fromTranslation = (x: number, y: number, z: number): Mat4 => [\n    [1.0, 0.0, 0.0, 0.0],\n    [0.0, 1.0, 0.0, 0.0],\n    [0.0, 0.0, 1.0, 0.0],\n    [x, y, z, 1.0],\n];\n\nexport const fromAngleX = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [1.0, 0.0, 0.0, 0.0],\n        [0.0, cos, sin, 0.0],\n        [0.0, -sin, cos, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromAngleY = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [cos, 0.0, -sin, 0.0],\n        [0.0, 1.0, 0.0, 0.0],\n        [sin, 0.0, cos, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromAngleZ = (degree: number): Mat4 => {\n    const radian = toRadian(degree);\n    const sin = Math.sin(radian);\n    const cos = Math.cos(radian);\n\n    return [\n        [cos, sin, 0.0, 0.0],\n        [-sin, cos, 0.0, 0.0],\n        [0.0, 0.0, 1.0, 0.0],\n        [0.0, 0.0, 0.0, 1.0],\n    ];\n};\n\nexport const fromScale = (scale: number): Mat4 => [\n    [scale, 0.0, 0.0, 0.0],\n    [0.0, scale, 0.0, 0.0],\n    [0.0, 0.0, scale, 0.0],\n    [0.0, 0.0, 0.0, 1.0],\n];\n\nexport const transpose = ([x, y, z, w]: Mat4): Mat4 => zip(x, y, z, w) as Mat4;\n\nexport const multiply = (a: Mat4, [x2, y2, z2, w2]: Mat4): Mat4 => {\n    const aTransposed = transpose(a);\n    return [\n        aTransposed.map(partial(dot, x2)),\n        aTransposed.map(partial(dot, y2)),\n        aTransposed.map(partial(dot, z2)),\n        aTransposed.map(partial(dot, w2)),\n    ] as Mat4;\n};\n\nexport const apply = (point: Vec4, mat: Mat4): Vec4 =>\n    transpose(mat).map((row) => dot(row, point)) as Vec4;\n\nexport const toCss = (mat: Mat4): string => `matrix3d(${mat.flat().join(',')})`;\n","import { range } from 'lodash';\nimport { Failure, Result, Success } from 'parsimmon';\nimport { fromAngleX, fromAngleY, fromAngleZ, Mat4 } from '../../utils/Matrix4';\n\nexport interface SingleRotationCommand {\n    readonly axis: RotationAxis;\n    readonly slices: number[];\n    readonly rotation: number;\n}\n\nexport interface LoopedRotationCommands {\n    readonly commands: RotationCommand[];\n    readonly iterations: number;\n}\n\nexport type RotationCommand = SingleRotationCommand | LoopedRotationCommands;\n\nexport const isLoopedRotationCommands = (\n    rotationCommand: RotationCommand\n): rotationCommand is LoopedRotationCommands =>\n    (rotationCommand as LoopedRotationCommands).iterations !== undefined;\n\nexport enum RotationAxis {\n    X = 0,\n    Y = 1,\n    Z = 2,\n}\n\nexport const rotationCommandToMat4 = ({\n    axis,\n    rotation,\n}: SingleRotationCommand): Mat4 => {\n    switch (axis) {\n        case RotationAxis.X: {\n            return fromAngleX(rotation);\n        }\n        case RotationAxis.Y: {\n            return fromAngleY(rotation);\n        }\n        case RotationAxis.Z: {\n            return fromAngleZ(rotation);\n        }\n    }\n};\n\nexport const rotationCommandToCssRotation = ({\n    axis,\n    rotation,\n}: SingleRotationCommand): string => {\n    switch (axis) {\n        case RotationAxis.X: {\n            return `rotateX(${rotation}deg)`;\n        }\n        case RotationAxis.Y: {\n            return `rotateY(${rotation}deg)`;\n        }\n        case RotationAxis.Z: {\n            return `rotateZ(${rotation}deg)`;\n        }\n    }\n};\n\nexport const letterToAxis = (letter: string): RotationAxis => {\n    switch (letter.toUpperCase()) {\n        case 'L':\n        case 'R':\n        case 'M':\n        case 'X':\n            return RotationAxis.X;\n        case 'U':\n        case 'D':\n        case 'E':\n        case 'Y':\n            return RotationAxis.Y;\n        case 'F':\n        case 'B':\n        case 'S':\n        case 'Z':\n            return RotationAxis.Z;\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const letterToSlices = (\n    letter: string,\n    cubeDimension: number\n): number[] => {\n    switch (letter) {\n        case 'F':\n        case 'U':\n        case 'L':\n            return [1];\n        case 'f':\n        case 'u':\n        case 'l':\n            if (cubeDimension < 3) {\n                return [1];\n            } else if (cubeDimension > 3) {\n                return [2];\n            } else {\n                return [1, 2];\n            }\n        case 'B':\n        case 'D':\n        case 'R':\n            return [cubeDimension];\n        case 'b':\n        case 'd':\n        case 'r':\n            if (cubeDimension < 3) {\n                return [cubeDimension];\n            } else if (cubeDimension > 3) {\n                return [cubeDimension - 1];\n            } else {\n                return [cubeDimension - 1, cubeDimension];\n            }\n        case 'X':\n        case 'Y':\n        case 'Z':\n        case 'x':\n        case 'y':\n        case 'z':\n            return range(1, cubeDimension + 1);\n        case 'M':\n        case 'E':\n        case 'S':\n            return (() => {\n                const middleSlice = Math.ceil(cubeDimension / 2);\n                return cubeDimension % 2 === 0\n                    ? [middleSlice, middleSlice + 1]\n                    : [middleSlice];\n            })();\n        case 'm':\n        case 'e':\n        case 's':\n            switch (cubeDimension) {\n                case 1:\n                    return [1];\n                case 2:\n                    return [1, 2];\n                default:\n                    return range(2, cubeDimension);\n            }\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const letterToRotation = (letter: string): number => {\n    switch (letter.toUpperCase()) {\n        case 'F':\n        case 'D':\n        case 'R':\n        case 'E': // Same as D\n        case 'S': // Same as F\n        case 'X': // Same as R\n        case 'Z': // Same as F\n            return 90;\n        case 'B':\n        case 'U':\n        case 'L':\n        case 'M': // Same as L\n        case 'Y': // Same as U\n            return -90;\n        default:\n            throw new Error(`${letter} is not a valid cube notation Letter!`);\n    }\n};\n\nexport const wide = (hasWide: boolean) => (\n    letter: string,\n    slices: number[],\n    cubeDimension: number\n): number[] => {\n    if (hasWide) {\n        switch (letter.toUpperCase()) {\n            case 'B':\n            case 'D':\n            case 'R':\n                return range(cubeDimension - slices[0] + 1, cubeDimension + 1);\n            default:\n                return range(1, slices[0] + 1);\n        }\n    } else {\n        switch (letter.toUpperCase()) {\n            case 'B':\n            case 'D':\n            case 'R':\n                return slices.map((slice) => cubeDimension + 1 - slice);\n            default:\n                return slices;\n        }\n    }\n};\n\nexport const prime = (hasPrime: boolean) => (rotation: number): number =>\n    hasPrime ? rotation * -1 : rotation;\nexport const double = (hasDouble: boolean) => (rotation: number): number =>\n    hasDouble ? Math.sign(rotation) * 180 : rotation;\n\nexport const isError = (result: Result<RotationCommand[]>): result is Failure =>\n    !result.status;\n\nexport const isOk = (\n    result: Result<RotationCommand[]>\n): result is Success<RotationCommand[]> => result.status;\n","import { createReducer } from '@reduxjs/toolkit';\nimport { playerActions } from './PlayerActions';\nimport {\n    RotationCommand,\n    SingleRotationCommand,\n} from '../../cube/algorithms/RotationCommand';\nimport { Result } from 'parsimmon';\nimport { cubeActions } from '../cube/CubeActions';\n\nexport enum PlayerStatus {\n    STOPPED = 'STOPPED',\n    PLAYING = 'PLAYING',\n    PAUSED = 'PAUSED',\n}\n\nexport interface IPlayerState {\n    notation: string;\n    rotationCommands: Result<RotationCommand[]>;\n    currentCommand?: SingleRotationCommand;\n    status: PlayerStatus;\n}\n\nconst initialPlayerState: IPlayerState = {\n    notation: '',\n    rotationCommands: { status: true, value: [] },\n    status: PlayerStatus.STOPPED,\n};\n\nexport const playerReducer = createReducer(initialPlayerState, (builder) => {\n    builder\n        .addCase(playerActions.updateNotation, (state, action) => {\n            state.notation = action.payload;\n        })\n        .addCase(playerActions.parsedNotation, (state, action) => {\n            state.rotationCommands = action.payload;\n        })\n        .addCase(playerActions.play, (state, _action) => {\n            state.status = PlayerStatus.PLAYING;\n        })\n        .addCase(playerActions.unPause, (state, _action) => {\n            state.status = PlayerStatus.PLAYING;\n        })\n        .addCase(playerActions.pause, (state, _action) => {\n            state.status = PlayerStatus.PAUSED;\n        })\n        .addCase(playerActions.stop, (state, _action) => {\n            state.status = PlayerStatus.STOPPED;\n        })\n        .addCase(playerActions.setCurrentRotationCommand, (state, action) => {\n            state.currentCommand = action.payload;\n        })\n        .addCase(cubeActions.applyRotationCommands, (state, _action) => {\n            state.currentCommand = undefined;\n        });\n});\n","import { range, zip, curry } from 'lodash';\nimport {\n    ICubicle,\n    IFace,\n    CubeAxis,\n    Color,\n    Side,\n    FaceArrowDirection,\n} from './CubeTypes';\nimport {\n    Mat4,\n    multiply,\n    fromTranslation,\n    fromAngleY,\n    fromAngleX,\n    apply,\n} from '../utils/Matrix4';\nimport { Vec4 } from '../utils/Vector4';\nimport {\n    RotationCommand,\n    isLoopedRotationCommands,\n    rotationCommandToMat4,\n    SingleRotationCommand,\n} from './algorithms/RotationCommand';\n\nconst sideToColor = {\n    [Side.FRONT]: Color.BLUE,\n    [Side.BACK]: Color.GREEN,\n    [Side.LEFT]: Color.ORANGE,\n    [Side.RIGHT]: Color.RED,\n    [Side.UP]: Color.YELLOW,\n    [Side.DOWN]: Color.WHITE,\n};\n\nconst sideToTransform = (side: Side, cubicleSize: number): Mat4 => {\n    const halfCubicleSize = cubicleSize / 2.0;\n    return {\n        [Side.FRONT]: fromTranslation(0, 0, halfCubicleSize),\n        [Side.BACK]: multiply(\n            fromTranslation(0, 0, -halfCubicleSize),\n            fromAngleY(180)\n        ),\n        [Side.LEFT]: multiply(\n            fromTranslation(-halfCubicleSize, 0, 0),\n            fromAngleY(-90)\n        ),\n        [Side.RIGHT]: multiply(\n            fromTranslation(halfCubicleSize, 0, 0),\n            fromAngleY(90)\n        ),\n        [Side.UP]: multiply(\n            fromTranslation(0, -halfCubicleSize, 0),\n            fromAngleX(90)\n        ),\n        [Side.DOWN]: multiply(\n            fromTranslation(0, halfCubicleSize, 0),\n            fromAngleX(-90)\n        ),\n    }[side];\n};\n\nconst axisToTranslation = (\n    [x, y, z]: CubeAxis,\n    cubicleSize: number,\n    cubicleGap: number,\n    cubeDimension: number\n): Mat4 => {\n    const offset = (cubeDimension + 1) * cubicleSize * (cubicleGap / 2);\n    const sizeGap = cubicleSize * cubicleGap;\n    return fromTranslation(\n        x * sizeGap - offset,\n        y * sizeGap - offset,\n        -z * sizeGap + offset\n    );\n};\n\nexport const rotateAxis = (\n    axis: CubeAxis,\n    rotation: Mat4,\n    cubeDimension: number\n): CubeAxis => {\n    const offset = (cubeDimension + 1) * 0.5;\n    const point = axis.map((it, index) =>\n        index === 2 ? -it + offset : it - offset\n    );\n    const rotatedPoint = apply([...point, 1] as Vec4, rotation).slice(0, 3);\n    return rotatedPoint\n        .map((it, index) => (index === 2 ? -it + offset : it + offset))\n        .map(Math.round) as CubeAxis;\n};\n\nconst isCubicleVisible = (axis: CubeAxis, cubeDimension: number) =>\n    axis.some((it) => it === 1 || it === cubeDimension);\n\nconst isOuterFace = (side: Side, [x, y, z]: CubeAxis, cubeDimension: number) =>\n    ({\n        [Side.FRONT]: z === 1,\n        [Side.BACK]: z === cubeDimension,\n        [Side.LEFT]: x === 1,\n        [Side.RIGHT]: x === cubeDimension,\n        [Side.UP]: y === 1,\n        [Side.DOWN]: y === cubeDimension,\n    }[side]);\n\nconst generateFace = (\n    side: Side,\n    axis: CubeAxis,\n    cubicleSize: number,\n    cubeDimension: number\n): IFace => ({\n    id: side,\n    color: isOuterFace(side, axis, cubeDimension)\n        ? sideToColor[side]\n        : Color.DEFAULT,\n    transform: sideToTransform(side, cubicleSize),\n});\n\nexport const generateCubicles = (\n    cubicleSize: number,\n    cubicleGap: number,\n    cubeDimension: number\n): ICubicle[] => {\n    const indexes = range(1, cubeDimension + 1);\n    return indexes\n        .flatMap((z) =>\n            indexes.flatMap((y) => indexes.map<CubeAxis>((x) => [x, y, z]))\n        )\n        .filter((axis) => isCubicleVisible(axis, cubeDimension))\n        .map<ICubicle>((axis) => ({\n            id: axis,\n            axis,\n            faces: Object.values(Side).map((side) =>\n                generateFace(side, axis, cubicleSize, cubeDimension)\n            ),\n            transform: axisToTranslation(\n                axis,\n                cubicleSize,\n                cubicleGap,\n                cubeDimension\n            ),\n        }));\n};\n\nexport const canApplyRotationCommand = (\n    cubeAxis: CubeAxis,\n    { slices, axis }: SingleRotationCommand\n): boolean => slices.includes(cubeAxis[axis]);\n\nexport const applyRotationCommand = (\n    cubicles: ICubicle[],\n    rotationCommand: RotationCommand,\n    cubeDimension: number\n): ICubicle[] => {\n    if (isLoopedRotationCommands(rotationCommand)) {\n        return range(0, rotationCommand.iterations).reduce(\n            (cubicles2, _) =>\n                rotationCommand.commands.reduce(\n                    (cubicles3, command) =>\n                        applyRotationCommand(cubicles3, command, cubeDimension),\n                    cubicles2\n                ),\n            cubicles\n        );\n    } else {\n        return cubicles.map((cubicle) => {\n            if (canApplyRotationCommand(cubicle.axis, rotationCommand)) {\n                const rotationMat = rotationCommandToMat4(rotationCommand);\n                return {\n                    ...cubicle,\n                    axis: rotateAxis(cubicle.axis, rotationMat, cubeDimension),\n                    transform: multiply(rotationMat, cubicle.transform),\n                };\n            } else {\n                return cubicle;\n            }\n        });\n    }\n};\n\nexport const generateFaceArrowCommand = curry(\n    (\n        cubeAxis: CubeAxis,\n        cubicleRotation: Mat4,\n        originalSide: Side,\n        faceArrow: FaceArrowDirection\n    ): SingleRotationCommand => {\n        // TODO find a way to calculate this from existing matrices\n        const [down, right] = {\n            [Side.FRONT]: [\n                [-1, 0, 0],\n                [0, 1, 0],\n            ],\n            [Side.BACK]: [\n                [1, 0, 0],\n                [0, 1, 0],\n            ],\n            [Side.LEFT]: [\n                [0, 0, -1],\n                [0, 1, 0],\n            ],\n            [Side.RIGHT]: [\n                [0, 0, 1],\n                [0, 1, 0],\n            ],\n            [Side.UP]: [\n                [-1, 0, 0],\n                [0, 0, 1],\n            ],\n            [Side.DOWN]: [\n                [-1, 0, 0],\n                [0, 0, -1],\n            ],\n        }[originalSide];\n\n        const point = {\n            [FaceArrowDirection.DOWN]: down,\n            [FaceArrowDirection.RIGHT]: right,\n            [FaceArrowDirection.UP]: down.map((it) => it * -1),\n            [FaceArrowDirection.LEFT]: right.map((it) => it * -1),\n        }[faceArrow];\n\n        const rotatedPoint = apply([...point, 0] as Vec4, cubicleRotation)\n            .slice(0, 3)\n            .map(Math.round);\n\n        const newCubeAxis = zip(cubeAxis, rotatedPoint).map(\n            ([it, sign]) => it! * sign!\n        );\n\n        const axis = newCubeAxis.findIndex((it) => it !== 0);\n        const slice = newCubeAxis[axis];\n\n        return {\n            axis,\n            slices: [Math.abs(slice)],\n            rotation: 90 * Math.sign(slice),\n        };\n    }\n);\n","import { createReducer } from '@reduxjs/toolkit';\nimport { cubeActions } from './CubeActions';\nimport { ICubicle } from '../../cube/CubeTypes';\nimport { fromAngleX, fromAngleY, Mat4, multiply } from '../../utils/Matrix4';\nimport { applyRotationCommand } from '../../cube/CubeUtils';\n\nexport interface ICubeState {\n    dimension: number;\n    size: number;\n    gapFactor: number;\n    scale: number;\n    rotationDuration: number;\n    cubicles: ICubicle[];\n    rotation: Mat4;\n}\n\nconst initialCubeState: ICubeState = {\n    dimension: 3,\n    size: 300,\n    gapFactor: 1.01,\n    scale: 1.0,\n    rotationDuration: 750,\n    cubicles: [],\n    rotation: multiply(fromAngleX(-45), fromAngleY(-45)),\n};\n\nexport const cubeReducer = createReducer(initialCubeState, (builder) => {\n    builder\n        .addCase(cubeActions.setCubeDimension, (state, action) => {\n            state.dimension = action.payload;\n        })\n        .addCase(cubeActions.setCubeScale, (state, action) => {\n            state.scale = action.payload;\n        })\n        .addCase(cubeActions.setRotationAnimationSpeed, (state, action) => {\n            state.rotationDuration = action.payload;\n        })\n        .addCase(cubeActions.updateCubicles, (state, action) => {\n            state.cubicles = action.payload;\n        })\n        .addCase(cubeActions.applyRotationCommands, (state, action) => {\n            state.cubicles = action.payload.reduce(\n                (cubicles, command) =>\n                    applyRotationCommand(cubicles, command, state.dimension),\n                state.cubicles\n            );\n        });\n});\n","import { createAction } from '@reduxjs/toolkit';\nimport { Result } from 'parsimmon';\nimport {\n    RotationCommand,\n    SingleRotationCommand,\n} from '../../cube/algorithms/RotationCommand';\n\nconst play = createAction<RotationCommand[]>('PLAY');\nconst stop = createAction('STOP');\nconst pause = createAction('PAUSE');\nconst unPause = createAction('UN_PAUSE');\n\nconst updateNotation = createAction<string>('UPDATE_NOTATION');\n\nconst parsedNotation = createAction<Result<RotationCommand[]>>(\n    'PARSED_NOTATION'\n);\n\nconst setCurrentRotationCommand = createAction<SingleRotationCommand>(\n    'SET_CURRENT_ROTATION_COMMAND'\n);\n\nconst actions = {\n    play,\n    stop,\n    pause,\n    unPause,\n    updateNotation,\n    parsedNotation,\n    setCurrentRotationCommand,\n};\n\nexport { actions as playerActions };\n","import React from 'react';\nimport Arrow from './Arrow';\nimport './Arrows.scss';\nimport { Direction } from './CubeTypes';\nimport { makeNotationParser } from './algorithms/Parser';\nimport { useDispatch } from 'react-redux';\nimport { playerActions } from '../states/player/PlayerActions';\n\nenum Side {\n    FRONT = 'rotateY(0deg)',\n    RIGHT = 'rotateY(90deg)',\n}\n\ninterface ICubeArrowsProps {\n    size: number;\n    cubicleSize: number;\n    cubeDimension: number;\n}\n\nconst CubeArrows: React.FunctionComponent<ICubeArrowsProps> = ({\n    size,\n    cubicleSize,\n    cubeDimension,\n}) => {\n    const dispatch = useDispatch();\n\n    const halfSize = size / 2;\n\n    const style = (side: Side, direction: Direction): React.CSSProperties => {\n        return {\n            width: cubicleSize,\n            transform: `${side} translate3d(0, ${halfSize}px, ${halfSize}px) rotateX(-90deg) translateY(-${\n                cubicleSize / 2\n            }px) rotateZ(${90 * direction}deg) translateY(-${\n                cubicleSize * (cubeDimension / 2 - 0.5)\n            }px)`,\n            cursor: 'pointer',\n            position: 'absolute',\n        };\n    };\n\n    const yStyle = (side: Side, direction: Direction): React.CSSProperties => ({\n        width: cubicleSize,\n        transform: `${side} rotateZ(${90 * direction}deg) translate3d(0, -${\n            cubicleSize * (cubeDimension / 2 + 0.5)\n        }px, ${halfSize}px)`,\n        cursor: 'pointer',\n        position: 'absolute',\n    });\n\n    const arrow = (\n        <svg className=\"cube-arrows-svg\" viewBox=\"-50 -50 100 100\">\n            <Arrow className=\"cube-arrow\" />\n        </svg>\n    );\n\n    const rotateWithNotation = (notation: string) => {\n        const parser = makeNotationParser(cubeDimension).rotationCommands;\n        const command = parser.tryParse(notation);\n        dispatch(playerActions.play(command));\n    };\n\n    return (\n        <div className=\"display-contents\">\n            <div\n                onClick={() => rotateWithNotation(\"Z'\")}\n                style={style(Side.FRONT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('Z')}\n                style={style(Side.FRONT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation(\"X'\")}\n                style={style(Side.RIGHT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('X')}\n                style={style(Side.RIGHT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation(\"Y'\")}\n                style={yStyle(Side.RIGHT, Direction.CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n            <div\n                onClick={() => rotateWithNotation('Y')}\n                style={yStyle(Side.FRONT, Direction.ANTI_CLOCKWISE)}\n            >\n                {arrow}\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(CubeArrows);\n","import { Action, combineReducers } from 'redux';\nimport { Epic } from 'redux-observable';\nimport { cubeReducer, ICubeState } from './cube/CubeState';\nimport { useSelector } from 'react-redux';\nimport { IPlayerState, playerReducer } from './player/PlayerState';\n\nexport interface AppState {\n    cube: ICubeState;\n    player: IPlayerState;\n}\n\nexport const reducer = combineReducers<AppState>({\n    cube: cubeReducer,\n    player: playerReducer,\n});\n\nexport type AppEpic = Epic<Action, Action, AppState>;\n\nexport const useRedux = function <T>(selector: (state: AppState) => T) {\n    return useSelector<AppState, T>(selector);\n};\n","export interface IClassNameList {\n    hasClasses: boolean;\n    classNames: string[];\n}\n\nexport type ClassNameDictionary = {\n    [key: string]: boolean | undefined;\n};\n\nconst isClassNameList = (\n    arg: ClassNameDictionary | IClassNameList\n): arg is IClassNameList => (arg as IClassNameList).classNames !== undefined;\n\n/**\n * Create a single className string out of multiple classNames\n *\n * @param {string | ClassNameDictionary | IClassNameList}  classNames - classNames as simple string,\n * ClassNameDictionary where the key is used as classname and the value defines if it is used ({'myClass': true}),\n * ClassNameList where a boolean key defines if a whole list of classes should be used {hasClasses: true, classNames: ['myClass']}\n * @return {string} - the className\n */\nconst createClassName = (\n    ...classNames: (string | undefined | ClassNameDictionary | IClassNameList)[]\n) =>\n    classNames\n        .map((className) => {\n            if (typeof className === 'object') {\n                if (isClassNameList(className)) {\n                    return className.hasClasses\n                        ? className.classNames.join(' ')\n                        : '';\n                } else {\n                    return Object.keys(className)\n                        .filter((key) => className[key])\n                        .join(' ');\n                }\n            }\n            return className;\n        })\n        .filter((className) => className?.length)\n        .join(' ');\n\nexport default createClassName;\n","import React from 'react';\nimport createClassName from '../utils/createClassName';\n\ninterface IArrowProps {\n    className?: string;\n}\n\nconst Arrow: React.FC<IArrowProps> = ({ className = '' }) => (\n    <g className={createClassName('arrow', className)}>\n        <line x1={0} y1={40} x2={0} y2={-40} />\n        <line x1={0} y1={-40} x2={-40} y2={0} />\n        <line x1={0} y1={-40} x2={-40} y2={0} style={{ transform: 'scale(-1, 1)' }} />\n    </g>\n);\n\nexport default React.memo(Arrow);\n","import React from 'react';\nimport './Arrows.scss';\nimport Arrow from './Arrow';\nimport { FaceArrowDirection } from './CubeTypes';\n\ninterface IArrowsProps {\n    rotate: (faceArrow: FaceArrowDirection) => void;\n}\n\nconst FaceArrows: React.FunctionComponent<IArrowsProps> = ({ rotate }) => (\n    <svg viewBox=\"0 0 100 100\" className=\"face-arrows-svg\">\n        <g className=\"face-arrows-wrapper\">\n            <FaceArrow direction={FaceArrowDirection.UP} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.DOWN} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.LEFT} rotate={rotate} />\n            <FaceArrow direction={FaceArrowDirection.RIGHT} rotate={rotate} />\n        </g>\n    </svg>\n);\n\ninterface IArrowProps {\n    direction: FaceArrowDirection;\n    rotate: (faceArrow: FaceArrowDirection) => void;\n}\n\nconst FaceArrow: React.FC<IArrowProps> = ({ direction, rotate }) => (\n    <g\n        className=\"face-arrow-wrapper\"\n        style={{ transform: `rotate(${direction}deg)` }}\n        onClick={() => rotate(direction)}\n    >\n        <rect width=\"100%\" height=\"100%\" className=\"face-arrow-wrapper__box\" />\n        <Arrow className=\"face-arrow\" />\n    </g>\n);\n\nexport default FaceArrows;\n","import React, { useState } from 'react';\nimport { Color, FaceArrowDirection } from './CubeTypes';\nimport { Mat4, toCss } from '../utils/Matrix4';\nimport FaceArrows from './FaceArrows';\nimport { SingleRotationCommand } from './algorithms/RotationCommand';\nimport { useDispatch } from 'react-redux';\nimport { playerActions } from '../states/player/PlayerActions';\n\ninterface IFaceProps {\n    transform: Mat4;\n    color: Color;\n    generateArrowCommand: (\n        faceArrow: FaceArrowDirection\n    ) => SingleRotationCommand;\n}\n\nconst Face: React.FunctionComponent<IFaceProps> = ({\n    transform,\n    color,\n    generateArrowCommand,\n}) => {\n    const [isHovered, setHovered] = useState(false);\n    const dispatch = useDispatch();\n\n    const rotate = (faceArrow: FaceArrowDirection) =>\n        dispatch(playerActions.play([generateArrowCommand(faceArrow)]));\n\n    const onMouseEnter = () => setHovered(true);\n    const onMouseLeave = () => setHovered(false);\n\n    const style: React.CSSProperties = {\n        backgroundColor: color,\n        transform: toCss(transform),\n    };\n\n    return (\n        <div\n            className=\"rubiks-cube__face\"\n            style={style}\n            onMouseEnter={onMouseEnter}\n            onMouseLeave={onMouseLeave}\n        >\n            {isHovered &&\n                color !== Color.DEFAULT &&\n                color !== Color.TRANSPARENT && <FaceArrows rotate={rotate} />}\n        </div>\n    );\n};\n\nexport default React.memo(Face);\n","import React from 'react';\nimport { Mat4, toCss } from '../utils/Matrix4';\nimport { CubeAxis, IFace } from './CubeTypes';\nimport Face from './Face';\nimport { generateFaceArrowCommand } from './CubeUtils';\n\ninterface ICubicleProps {\n    axis: CubeAxis;\n    faces: IFace[];\n    animatedTransform: string;\n    transform: Mat4;\n    size: number;\n    rotationDuration: number;\n}\n\nconst Cubicle: React.FunctionComponent<ICubicleProps> = ({\n    axis,\n    faces,\n    animatedTransform,\n    transform,\n    size,\n    rotationDuration,\n}) => {\n    const style: React.CSSProperties = {\n        transform: animatedTransform + toCss(transform),\n        width: size,\n        height: size,\n        transition:\n            animatedTransform === 'rotate(0)'\n                ? ''\n                : `transform ${rotationDuration}ms`,\n    };\n\n    const generateArrowCommand = generateFaceArrowCommand(axis, transform);\n\n    return (\n        <div className=\"rubiks-cube__cubicle\" style={style}>\n            {faces.map(({ id, transform, color }) => (\n                <Face\n                    key={id}\n                    transform={transform}\n                    color={color}\n                    generateArrowCommand={generateArrowCommand(id)}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default React.memo(Cubicle);\n","import { isFunction, isNil } from 'lodash';\n\ntype TypeOrMaybeType<T> = T | Maybe<T>;\ntype FunctionOrValue<T> = (() => TypeOrMaybeType<T>) | TypeOrMaybeType<T>;\n\nclass Maybe<T> {\n    /**\n     * Create a maybe with a value T\n     * If the value is already a maybe then the returning type WON'T be double wrapped with a maybe\n     * Throws error if value is null or undefined\n     * @param value\n     */\n    static some<T>(value: FunctionOrValue<T>): Maybe<NonNullable<T>> {\n        if (isNil(value)) {\n            throw Error('Provided value must not be empty');\n        }\n\n        const result = isFunction(value) ? value()! : value!;\n\n        if (result instanceof Maybe) {\n            return result as Maybe<NonNullable<T>>;\n        }\n\n        return new Maybe<NonNullable<T>>(result);\n    }\n\n    /**\n     * Create a maybe with no value\n     */\n    static none<T>(): Maybe<NonNullable<T>> {\n        return new Maybe<NonNullable<T>>(null);\n    }\n\n    /**\n     * Create a maybe that is either some or none depending on the provided value\n     * If the value is already a maybe then the returning type WON'T be double wrapped with a maybe\n     * @param value\n     */\n    static of<T>(value: FunctionOrValue<T>): Maybe<NonNullable<T>> {\n        return isNil(value) ? Maybe.none() : Maybe.some(value);\n    }\n\n    /**\n     * Create a maybe from a function that might throw an error\n     * Returns none if an error is thrown\n     * @param valueFunction\n     */\n    static tryOf<T>(valueFunction: () => T): Maybe<NonNullable<T>> {\n        try {\n            const value = valueFunction();\n            return Maybe.of(value);\n        } catch (e) {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * Check if maybe is a some\n     */\n    isSome = (): boolean => !this.isNone();\n\n    /**\n     * Check if maybe is a none\n     */\n    isNone = (): boolean => isNil(this.value);\n\n    /**\n     * Get the value of the maybe\n     * Avoid this function if possible\n     * Throws error if the maybe is a none\n     */\n    unwrap = (): T => {\n        if (this.isNone()) {\n            throw Error('Provided value must not be empty');\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe\n     * Avoid this function if possible\n     * Throws custom error message if the maybe is a none\n     * @param errorMsg\n     */\n    expect = (errorMsg: string): T => {\n        if (this.isNone()) {\n            throw Error(errorMsg);\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe if it is a some otherwise use the provided default value\n     * @param defaultValue - default value (or function that creates a default value) to be used if value is none\n     */\n    unwrapOr = (defaultValue: (() => T) | T): T => {\n        if (this.isNone()) {\n            return isFunction(defaultValue) ? defaultValue() : defaultValue;\n        }\n\n        return this.value!;\n    };\n\n    /**\n     * Get the value of the maybe to work with it and return a new type wrapped in a maybe\n     * If the new type is also a maybe then the returning type WON'T be double wrapped with a maybe\n     * @param onSome - a function receiving the value returning a new value\n     */\n    map<U>(onSome: (value: T) => U | Maybe<U>): Maybe<NonNullable<U>> {\n        if (this.isNone()) {\n            return (this as unknown) as Maybe<NonNullable<U>>;\n        }\n\n        return Maybe.of(() => onSome(this.value!));\n    }\n\n    /**\n     * Get the value of the maybe to work with it and return a new type if the maybe is some otherwise use provided default value\n     * @param onSome - a function receiving the value returning a new value\n     * @param defaultValue - default value (or function that creates a default value) to be used if value is none\n     */\n    mapOr<U>(onSome: (value: T) => U, defaultValue: (() => U) | U): U {\n        if (this.isNone()) {\n            return isFunction(defaultValue) ? defaultValue() : defaultValue;\n        }\n\n        return onSome(this.value!);\n    }\n\n    /**\n     * Calls predicate with the contained value and returns this if predicate is true otherwise returns None\n     * @param predicate - filter function\n     */\n    filter(predicate: (value: T) => boolean): Maybe<NonNullable<T>> {\n        if (this.isSome()) {\n            if (predicate(this.unwrap())) {\n                return (this as unknown) as Maybe<NonNullable<T>>;\n            }\n        }\n\n        return Maybe.none();\n    }\n\n    /**\n     * Use provided value if this is Some otherwise return None\n     * @param other - provided value\n     */\n    and<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        if (this.isSome()) {\n            return Maybe.of(other);\n        }\n\n        return (this as unknown) as Maybe<NonNullable<T | U>>;\n    }\n\n    /**\n     * Use provided value if this is None otherwise return this\n     * @param other - provided value\n     */\n    or<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        if (this.isNone()) {\n            return Maybe.of(other);\n        }\n\n        return (this as unknown) as Maybe<NonNullable<T | U>>;\n    }\n\n    /**\n     * Use this if some, or use provided value if some otherwise return None\n     * @param other - provided value\n     */\n    xor<U>(other: (() => Maybe<U>) | Maybe<U>): Maybe<NonNullable<T | U>> {\n        const that = Maybe.of(other);\n\n        if (this.isSome() && that.isNone()) {\n            return (this as unknown) as Maybe<NonNullable<T | U>>;\n        } else if (this.isNone() && that.isSome()) {\n            return that;\n        } else {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * Create a maybe from a function that might throw an error\n     * Returns none if an error is thrown\n     * @param onSome\n     */\n    try<U>(onSome: (value: T) => U | Maybe<U>): Maybe<NonNullable<U>> {\n        try {\n            return this.map(onSome);\n        } catch (e) {\n            return Maybe.none();\n        }\n    }\n\n    /**\n     * If value of the maybe is some call the provided function\n     * @param onSome - function receiving the value\n     */\n    ifIsSome = (onSome: (value: T) => void): this => {\n        if (this.isSome()) {\n            onSome(this.value!);\n        }\n\n        return this;\n    };\n\n    /**\n     * If value of the maybe is none call the provided function\n     * @param onNone - function called if value is none\n     */\n    ifIsNone = (onNone: () => void): this => {\n        if (this.isNone()) {\n            onNone();\n        }\n\n        return this;\n    };\n\n    /**\n     * Compare the containing value with the provided value\n     * Returns false if isNone\n     * @param value - value to compare\n     */\n    contains(value: T): boolean {\n        if (this.isSome()) {\n            return this.unwrap() === value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Check if two maybe instances are the same\n     * @param maybe - a maybe to compare\n     */\n    equals = (maybe: Maybe<T>) =>\n        (this.isNone() && maybe.isNone()) ||\n        (this.isSome() && maybe.contains(this.unwrap()));\n\n    private constructor(private value: T | null) {}\n}\n\nexport default Maybe;\n","import P from 'parsimmon';\nimport {\n    SingleRotationCommand,\n    double,\n    letterToAxis,\n    letterToRotation,\n    letterToSlices,\n    LoopedRotationCommands,\n    prime,\n    RotationCommand,\n    wide,\n} from './RotationCommand';\nimport { range, sample, sampleSize } from 'lodash';\n\n/**\n * Creates a cube notation parser that knows about the used cubeDimension\n *\n * Possible syntax versions should be roughly equal to:\n *\n * 1: [LRUDFBlrudfbMESXYZmesxyz]'?2?\n * 2: \\d+[LRUDFBlrudfb]w?'?2?\n * 3: \\[\\d+(,\\d)*\\][LRUDFBlrudfb]'?2?\n *\n * and groups and loops of:\n *\n * 4: \\(((1|2|3|4)[ ,])*\\)\\d*\n *\n * @param cubeDimension\n */\nexport const makeNotationParser = (cubeDimension: number) =>\n    P.createLanguage<{\n        separator: string;\n\n        comma: string;\n\n        lParenthesis: string;\n        rParenthesis: string;\n        lBracket: string;\n        rBracket: string;\n\n        wide: boolean;\n        prime: boolean;\n        double: boolean;\n\n        number: number;\n        numberInDimension: number;\n\n        slices: number[];\n\n        sliceableLetter: string;\n        notSliceableLetter: string;\n        letter: string;\n\n        simpleCommand: SingleRotationCommand;\n        slicedCommand: SingleRotationCommand;\n        loop: LoopedRotationCommands;\n\n        rotationCommands: RotationCommand[];\n    }>({\n        separator: (r) =>\n            P.alt(\n                P.optWhitespace.then(\n                    P.alt(\n                        r.comma,\n                        P.lookahead(r.lParenthesis.or(r.rParenthesis)),\n                        P.eof\n                    )\n                ),\n                P.whitespace.atLeast(1)\n            ).result(''),\n\n        comma: () => P.string(',').desc(','),\n\n        lParenthesis: () => P.string('(').desc('('),\n        rParenthesis: () => P.string(')').desc(')'),\n        lBracket: () => P.string('[').desc('['),\n        rBracket: () => P.string(']').desc(']'),\n\n        wide: () =>\n            P.letter\n                .chain((letter) =>\n                    ['W', 'w'].includes(letter)\n                        ? P.succeed(true)\n                        : P.fail('/[W]/i')\n                )\n                .fallback(false),\n        prime: () =>\n            P.string(\"'\")\n                .desc(\"'\")\n                .map((_) => true)\n                .fallback(false),\n\n        double: (r) =>\n            r.number\n                .chain((num) => (num === 2 ? P.succeed(true) : P.fail('2')))\n                .fallback(false),\n\n        number: () => P.regexp(/\\d+/).map(Number).desc('number'),\n        numberInDimension: (r) =>\n            r.number.chain((num) =>\n                num > 0 && num <= cubeDimension\n                    ? P.succeed(num)\n                    : P.fail(`1-${cubeDimension}`)\n            ),\n\n        slices: (r) =>\n            r.numberInDimension\n                .trim(P.optWhitespace)\n                .sepBy1(r.comma)\n                .map((nums) => nums.sort())\n                .wrap(r.lBracket, r.rBracket),\n\n        sliceableLetter: () => P.regexp(/[LRUDFB]/i),\n        notSliceableLetter: () => P.regexp(/[MESXYZ]/i),\n        letter: (r) => P.alt(r.sliceableLetter, r.notSliceableLetter),\n\n        simpleCommand: (r) =>\n            P.seq(r.letter, r.prime, r.double).map(\n                ([letter, hasPrime, hasDouble]) => ({\n                    axis: letterToAxis(letter),\n                    rotation: double(hasDouble)(\n                        prime(hasPrime)(letterToRotation(letter))\n                    ),\n                    slices: letterToSlices(letter, cubeDimension),\n                })\n            ),\n        slicedCommand: (r) =>\n            P.seq(\n                P.alt(\n                    P.seq(\n                        r.numberInDimension.map((num) => [num]),\n                        r.sliceableLetter,\n                        r.wide\n                    ),\n                    P.seq(r.slices, r.sliceableLetter, P.succeed(false))\n                ),\n                r.prime,\n                r.double\n            ).map(([[slices, letter, hasWide], hasPrime, hasDouble]) => ({\n                axis: letterToAxis(letter),\n                rotation: double(hasDouble)(\n                    prime(hasPrime)(letterToRotation(letter))\n                ),\n                slices: wide(hasWide)(letter, slices, cubeDimension),\n            })),\n        loop: (r) =>\n            P.seq(\n                r.rotationCommands.wrap(r.lParenthesis, r.rParenthesis),\n                r.number.fallback(1)\n            ).map(([commands, iterations]) => ({\n                commands,\n                iterations,\n            })),\n        rotationCommands: (r) =>\n            P.optWhitespace\n                .then(P.alt(r.simpleCommand, r.slicedCommand, r.loop))\n                .skip(r.separator)\n                .many(),\n    });\n\nexport const createRandomNotation = (cubeDimension: number): string => {\n    const letters = 'LRUDFB'.split('');\n    const loops = 20;\n\n    let moves = '';\n    let prevLetter = '';\n    let prevIsPrime = false;\n\n    const randomLetter = (slices: number[]) => {\n        let letter = '';\n        let isPrime = false;\n\n        do {\n            const slice = sample(slices) ?? '';\n            letter = slice + sample(letters)!;\n            isPrime = sample([true, false])!;\n        } while (prevLetter === letter && prevIsPrime !== isPrime);\n\n        prevLetter = letter;\n        prevIsPrime = isPrime;\n        moves += letter + (isPrime ? \"' \" : ' ');\n    };\n\n    if (cubeDimension > 3) {\n        const slices = range(2, cubeDimension);\n        const length = range(0, slices.length);\n        range(loops).forEach(() =>\n            randomLetter(sampleSize(slices, sample(length)))\n        );\n    } else {\n        range(loops).forEach(() => randomLetter([]));\n    }\n\n    return moves;\n};\n","import React, { useCallback, useState } from 'react';\nimport List from '@material-ui/core/List';\nimport Settings from './Settings';\nimport './Interface.scss';\nimport Algorithms from './Algorithms';\nimport Category from './Category';\nimport Player from './Player';\nimport { ListItem } from '@material-ui/core';\n\nenum Menu {\n    ALGORITHMS = 'ALGORITHMS',\n    SETTINGS = 'SETTINGS',\n    NONE = 'NONE',\n}\n\nconst Interface: React.FunctionComponent = () => {\n    const [openedMenu, setOpenedMenu] = useState(Menu.SETTINGS);\n    const setMenu = (menu: Menu) =>\n        setOpenedMenu((prevMenu) => (prevMenu === menu ? Menu.NONE : menu));\n\n    return (\n        <div className=\"app__interface\">\n            <List>\n                <ListItem className=\"interface-list__item\">\n                    <Player />\n                </ListItem>\n                <Category\n                    isOpen={openedMenu === Menu.ALGORITHMS}\n                    setMenu={useCallback(() => setMenu(Menu.ALGORITHMS), [])}\n                    title=\"Algorithms\"\n                >\n                    <Algorithms />\n                </Category>\n                <Category\n                    isOpen={openedMenu === Menu.SETTINGS}\n                    setMenu={useCallback(() => setMenu(Menu.SETTINGS), [])}\n                    title=\"Settings\"\n                >\n                    <Settings />\n                </Category>\n            </List>\n        </div>\n    );\n};\n\nexport default Interface;\n","import React from 'react';\nimport { useRedux } from '../states/States';\nimport { fromScale, fromTranslation, multiply, toCss } from '../utils/Matrix4';\nimport Cubicle from './Cubicle';\nimport './RubiksCube.scss';\nimport Maybe from '../utils/Maybe';\nimport { rotationCommandToCssRotation } from './algorithms/RotationCommand';\nimport createClassName from '../utils/createClassName';\nimport { canApplyRotationCommand } from './CubeUtils';\nimport CubeArrows from './CubeArrows';\nimport { PlayerStatus } from '../states/player/PlayerState';\n\nconst RubiksCube: React.FunctionComponent = () => {\n    const cubicles = useRedux((state) => state.cube.cubicles);\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const cubeSize = useRedux((state) => state.cube.size);\n    const scale = useRedux((state) => state.cube.scale);\n    const rotation = useRedux((state) => state.cube.rotation);\n    const rotationDuration = useRedux((state) => state.cube.rotationDuration);\n    const currentRotationCommand = Maybe.of(\n        useRedux((state) => state.player.currentCommand)\n    );\n    const isStopped =\n        useRedux((state) => state.player.status) === PlayerStatus.STOPPED;\n\n    const cubicleSize = cubeSize / cubeDimension;\n\n    const style: React.CSSProperties = {\n        width: cubeSize,\n        height: cubeSize,\n        transform: toCss(multiply(rotation, fromScale(scale))),\n    };\n\n    const positionCorrectionStyle = (): React.CSSProperties => {\n        const offset = (cubeSize * (cubeDimension - 1)) / (2 * cubeDimension);\n        const mat = fromTranslation(offset, offset, 0);\n        return {\n            transform: toCss(mat),\n            transformStyle: 'preserve-3d',\n        };\n    };\n\n    return (\n        <div className=\"app__cube\">\n            <div\n                className={createClassName('rubiks-cube', {\n                    'rubiks-cube--is-transitioning': !isStopped,\n                })}\n                style={style}\n            >\n                <div style={positionCorrectionStyle()}>\n                    <div className=\"display-contents\">\n                        {cubicles.map(({ id, faces, transform, axis }) => {\n                            const animatedTransform = currentRotationCommand\n                                .filter((command) =>\n                                    canApplyRotationCommand(axis, command)\n                                )\n                                .map(rotationCommandToCssRotation)\n                                .unwrapOr('rotate(0)');\n\n                            return (\n                                <Cubicle\n                                    key={id.join(',')}\n                                    axis={axis}\n                                    faces={faces}\n                                    animatedTransform={animatedTransform}\n                                    transform={transform}\n                                    size={cubicleSize}\n                                    rotationDuration={rotationDuration}\n                                />\n                            );\n                        })}\n                    </div>\n                    <CubeArrows\n                        cubeDimension={cubeDimension}\n                        size={cubeSize}\n                        cubicleSize={cubicleSize}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RubiksCube;\n","import React, { useMemo } from 'react';\nimport { Typography } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport { cubeActions } from '../states/cube/CubeActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\n\nconst Settings: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const scale = useRedux((state) => state.cube.scale);\n    const rotationAnimationSpeed = useRedux(\n        (state) => state.cube.rotationDuration\n    );\n    const playerStatus = useRedux((state) => state.player.status);\n\n    const isDisabled = playerStatus !== PlayerStatus.STOPPED;\n\n    return (\n        <List disablePadding={true} dense={true} className=\"interface-list\">\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"cube-dimension-slider\">\n                    Cube dimension\n                </Typography>\n                <Slider\n                    aria-labelledby=\"cube-dimension-slider\"\n                    valueLabelDisplay=\"auto\"\n                    marks={true}\n                    step={1}\n                    min={1}\n                    max={5}\n                    defaultValue={useMemo(() => cubeDimension, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(cubeActions.setCubeDimension(value as number))\n                    }\n                    disabled={isDisabled}\n                />\n            </ListItem>\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"scale-slider\">Scale</Typography>\n                <Slider\n                    aria-labelledby=\"scale-slider\"\n                    valueLabelDisplay=\"auto\"\n                    marks={true}\n                    step={0.1}\n                    min={0.2}\n                    max={2.0}\n                    defaultValue={useMemo(() => scale, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(cubeActions.setCubeScale(value as number))\n                    }\n                    disabled={isDisabled}\n                />\n            </ListItem>\n            <ListItem className=\"interface-list__item--settings\">\n                <Typography id=\"animation-duration-slider\">\n                    Animation duration\n                </Typography>\n                <Slider\n                    aria-labelledby=\"animation-duration-slider\"\n                    valueLabelDisplay=\"auto\"\n                    min={100}\n                    max={2000}\n                    step={50}\n                    defaultValue={useMemo(() => rotationAnimationSpeed, [])}\n                    onChangeCommitted={(event, value) =>\n                        dispatch(\n                            cubeActions.setRotationAnimationSpeed(\n                                value as number\n                            )\n                        )\n                    }\n                />\n            </ListItem>\n        </List>\n    );\n};\n\nexport default React.memo(Settings);\n","import { Color } from '../CubeTypes';\nimport { AlgorithmTree } from './AlgorithmTree';\n\nconst { YELLOW, ORANGE, RED, GREEN, BLUE, DEFAULT, TRANSPARENT } = Color;\n\nconst Look2CFOP: AlgorithmTree = {\n    name: '2 Look CFOP',\n    groups: [\n        {\n            name: 'OLL',\n            groups: [\n                {\n                    name: 'Edges',\n                    algorithms: [\n                        {\n                            name: 'Dot',\n                            notation: \"F (R U R' U') F' f (R U R' U') f'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'L',\n                            notation: \"f (R U R' U') f'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'Line',\n                            notation: \"F (R U R' U') F'\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Corners',\n                    groups: [\n                        {\n                            name: 'No Corners solved',\n                            algorithms: [\n                                {\n                                    name: 'H',\n                                    notation: \"F (R U R' U')3 F'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Pi',\n                                    notation: \"R U2 (R2 U' R2 U' R2) U2 R\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '1 Corner solved',\n                            algorithms: [\n                                {\n                                    name: 'Sune',\n                                    notation: \"R U R' U R U2 R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Anti-Sune',\n                                    notation: \"L' U' L U' L' U2 L\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '2 Corners solved',\n                            algorithms: [\n                                {\n                                    name: 'L',\n                                    notation: \"x (R' U R D') (R' U' R D) x'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            DEFAULT,\n                                            YELLOW,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'T',\n                                    notation: \"x (L U R' U') (L' U R U') x'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'U',\n                                    notation: \"R2 D R' U2 R D' R' U2 R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            DEFAULT,\n                                            YELLOW,\n                                            DEFAULT,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Parity',\n                    algorithms: [\n                        {\n                            name: 'Edge flipped',\n                            notation:\n                                \"(2R2 B2 U2) (2L U2) (2R' U2) (2R U2) (F2 2R F2) (2L' B2 2R2)\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    DEFAULT,\n                                    DEFAULT,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            name: 'PLL',\n            groups: [\n                {\n                    name: 'Corners',\n                    algorithms: [\n                        {\n                            name: 'Diagonal',\n                            notation:\n                                \"(F R U' R' U' R U R' F') (R U R' U' R' F R F')\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [DEFAULT, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [DEFAULT, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                        {\n                            name: 'Adjacent',\n                            notation:\n                                \"(R U R' U' R' F) R2 (U' R' U' R U R' F')\",\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                                [ORANGE, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [ORANGE, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                [\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                    DEFAULT,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Edges',\n                    groups: [\n                        {\n                            name: '3 Edges',\n                            algorithms: [\n                                {\n                                    name: 'Right to Left',\n                                    notation: \"R U' R U R U R U' R' U' R2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            GREEN,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            ORANGE,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            DEFAULT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            ORANGE,\n                                        ],\n                                        [\n                                            ORANGE,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            DEFAULT,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Left to Right',\n                                    notation: \"R2 U R U R' U' R' U' R' U R'\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            GREEN,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            RED,\n                                        ],\n                                        [RED, YELLOW, YELLOW, YELLOW, DEFAULT],\n                                        [\n                                            TRANSPARENT,\n                                            YELLOW,\n                                            YELLOW,\n                                            YELLOW,\n                                            RED,\n                                        ],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            DEFAULT,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                        {\n                            name: '4 Edges',\n                            algorithms: [\n                                {\n                                    name: 'Cross',\n                                    notation: \"M2 U' M2 U2 M2 U' M2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            BLUE,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [RED, YELLOW, YELLOW, YELLOW, ORANGE],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            GREEN,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                                {\n                                    name: 'Diagonal',\n                                    notation: \"M' U' M2 U' M2 U' M' U2 M2\",\n                                    startConfiguration: [\n                                        [\n                                            TRANSPARENT,\n                                            GREEN,\n                                            ORANGE,\n                                            GREEN,\n                                            TRANSPARENT,\n                                        ],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [GREEN, YELLOW, YELLOW, YELLOW, BLUE],\n                                        [ORANGE, YELLOW, YELLOW, YELLOW, RED],\n                                        [\n                                            TRANSPARENT,\n                                            BLUE,\n                                            RED,\n                                            BLUE,\n                                            TRANSPARENT,\n                                        ],\n                                    ],\n                                },\n                            ],\n                        },\n                    ],\n                },\n                {\n                    name: 'Parity',\n                    algorithms: [\n                        {\n                            name: 'Corners / Edges swapped',\n                            notation: '2R2 U2 2R2 u2 2R2 2U2',\n                            startConfiguration: [\n                                [\n                                    TRANSPARENT,\n                                    GREEN,\n                                    BLUE,\n                                    BLUE,\n                                    GREEN,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    YELLOW,\n                                    TRANSPARENT,\n                                ],\n                                [\n                                    TRANSPARENT,\n                                    BLUE,\n                                    GREEN,\n                                    GREEN,\n                                    BLUE,\n                                    TRANSPARENT,\n                                ],\n                            ],\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};\n\nexport default Look2CFOP;\n","import { AlgorithmTree } from './AlgorithmTree';\n\nconst Misc: AlgorithmTree = {\n    name: 'Misc',\n    algorithms: [\n        {\n            name: 'Sexy',\n            notation: \"R U R' U'\",\n        },\n    ],\n};\n\nexport default Misc;\n","import React from 'react';\nimport { Color } from '../cube/CubeTypes';\n\ninterface IStartConfigurationProps {\n    configuration: Color[][];\n}\n\nconst StartConfiguration: React.FunctionComponent<IStartConfigurationProps> = ({\n    configuration,\n}) => (\n    <div className=\"start-configuration\">\n        {configuration.flatMap((row, rowIndex) =>\n            row.map((color, colorIndex) => (\n                <React.Fragment key={`${rowIndex}-${colorIndex}`}>\n                    {color !== Color.TRANSPARENT && (\n                        <div\n                            className=\"start-configuration__face\"\n                            style={{\n                                backgroundColor: color,\n                                gridRow: rowIndex + 1,\n                                gridColumn: colorIndex + 1,\n                            }}\n                        />\n                    )}\n                </React.Fragment>\n            ))\n        )}\n    </div>\n);\n\nexport default React.memo(StartConfiguration);\n","import { Color } from '../CubeTypes';\n\nexport interface AlgorithmGroupGroup {\n    name: string;\n    groups: AlgorithmTree[];\n}\n\nexport interface AlgorithmGroup {\n    name: string;\n    algorithms: Algorithm[];\n}\n\nexport interface Algorithm {\n    name: string;\n    notation: string;\n    startConfiguration?: Color[][];\n}\n\nexport type AlgorithmTree = AlgorithmGroupGroup | AlgorithmGroup;\n\nconst isAlgorithmGroup = (tree: AlgorithmTree): tree is AlgorithmGroup =>\n    (tree as AlgorithmGroup).algorithms !== undefined;\n\nconst joinNames = (a: string, b: string): string =>\n    a === '' ? b : `${a} / ${b}`;\n\nexport const flattenTree = (\n    tree: AlgorithmTree,\n    name = ''\n): AlgorithmGroup[] => {\n    if (isAlgorithmGroup(tree)) {\n        return [{ ...tree, name: joinNames(name, tree.name) }];\n    } else {\n        return tree.groups.flatMap((group) =>\n            flattenTree(group, joinNames(name, tree.name))\n        );\n    }\n};\n","import React, { useState } from 'react';\nimport { List, ListItemText } from '@material-ui/core';\nimport ListItem from '@material-ui/core/ListItem';\nimport Look2CFOP from '../cube/algorithms/CFOP';\nimport Misc from '../cube/algorithms/Misc';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport StartConfiguration from './StartConfiguration';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport { playerActions } from '../states/player/PlayerActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\nimport { AlgorithmGroup, flattenTree } from '../cube/algorithms/AlgorithmTree';\n\nexport const categories = [Look2CFOP, Misc].flatMap((algorithm) =>\n    flattenTree(algorithm)\n);\n\nconst filterCategories = (searchValue: string): AlgorithmGroup[] =>\n    categories\n        .map<AlgorithmGroup | undefined>((group) => {\n            if (group.name.toLocaleLowerCase().includes(searchValue)) {\n                return group;\n            }\n\n            const algorithms = group.algorithms.filter((algorithm) =>\n                algorithm.name.toLocaleLowerCase().includes(searchValue)\n            );\n\n            if (algorithms.length === 0) {\n                return;\n            }\n\n            return {\n                ...group,\n                algorithms,\n            };\n        })\n        .filter((group): group is AlgorithmGroup => group !== undefined);\n\nconst Algorithms: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const playerStatus = useRedux((state) => state.player.status);\n\n    const [filteredCategories, setFilteredCategories] = useState(categories);\n    const filter = (event: React.ChangeEvent<HTMLInputElement>) =>\n        setFilteredCategories(\n            filterCategories(event.target.value.toLocaleLowerCase())\n        );\n\n    return (\n        <List\n            disablePadding={true}\n            dense={true}\n            className=\"interface-list interface-algorithm-list\"\n        >\n            <ListSubheader className=\"interface-algorithm-list__filer\">\n                <TextField label=\"Search\" fullWidth={true} onChange={filter} />\n            </ListSubheader>\n            {filteredCategories.map((group, index) => (\n                <React.Fragment key={group.name + index}>\n                    <ListSubheader className=\"interface-list__item interface-algorithm-list__header\">\n                        <Divider />\n                        {group.name}\n                        <Divider />\n                    </ListSubheader>\n                    {group.algorithms.map((algorithm) => (\n                        <ListItem\n                            key={algorithm.name + index}\n                            className=\"interface-list__item--moves\"\n                            button={true}\n                            onClick={() =>\n                                dispatch(\n                                    playerActions.updateNotation(\n                                        algorithm.notation!\n                                    )\n                                )\n                            }\n                            disabled={playerStatus !== PlayerStatus.STOPPED}\n                        >\n                            {algorithm.startConfiguration && (\n                                <StartConfiguration\n                                    configuration={algorithm.startConfiguration}\n                                />\n                            )}\n                            <ListItemText\n                                primary={algorithm.name}\n                                secondary={algorithm.notation}\n                            />\n                        </ListItem>\n                    ))}\n                </React.Fragment>\n            ))}\n        </List>\n    );\n};\n\nexport default Algorithms;\n","import React from 'react';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {\n    Accordion,\n    AccordionSummary,\n    AccordionDetails,\n} from '@material-ui/core';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\n\ninterface ICategoryProps {\n    isOpen: boolean;\n    setMenu: () => void;\n    title: string;\n}\n\nconst Category: React.FunctionComponent<ICategoryProps> = ({\n    title,\n    isOpen,\n    setMenu,\n    children,\n}) => (\n    <ListItem className=\"interface-list__item\">\n        <Accordion\n            expanded={isOpen}\n            TransitionProps={{ unmountOnExit: true }}\n            className=\"interface-category\"\n        >\n            <AccordionSummary\n                onClick={setMenu}\n                expandIcon={<ExpandMoreIcon />}\n                className=\"interface-category__summary\"\n            >\n                <Typography>{title}</Typography>\n            </AccordionSummary>\n            <AccordionDetails className=\"interface-category__details\">\n                {children}\n            </AccordionDetails>\n        </Accordion>\n    </ListItem>\n);\n\nexport default Category;\n","import React, { useCallback } from 'react';\nimport { Chip, IconButton, TextField } from '@material-ui/core';\nimport './Player.scss';\nimport { PlayerStatus } from '../states/player/PlayerState';\nimport {\n    Pause,\n    PlayArrow,\n    Refresh,\n    Shuffle,\n    SkipNext,\n    Stop,\n} from '@material-ui/icons';\nimport { playerActions } from '../states/player/PlayerActions';\nimport { useDispatch } from 'react-redux';\nimport { useRedux } from '../states/States';\nimport { isError, isOk } from '../cube/algorithms/RotationCommand';\nimport { cubeActions } from '../states/cube/CubeActions';\nimport { createRandomNotation } from '../cube/algorithms/Parser';\n\nconst Player: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n    const cubeDimension = useRedux((state) => state.cube.dimension);\n    const playerNotation = useRedux((state) => state.player.notation);\n    const playerStatus = useRedux((state) => state.player.status);\n    const rotationCommands = useRedux((state) => state.player.rotationCommands);\n\n    const updateNotation = useCallback(\n        (event: React.ChangeEvent<HTMLInputElement>) =>\n            dispatch(playerActions.updateNotation(event.target.value)),\n        []\n    );\n\n    const hasParseError = isError(rotationCommands);\n    const isNotationEmpty = playerNotation.length === 0;\n    const isStopped = playerStatus === PlayerStatus.STOPPED;\n\n    const onPlay = () => {\n        if (playerStatus === PlayerStatus.STOPPED && isOk(rotationCommands)) {\n            dispatch(playerActions.play(rotationCommands.value));\n        } else if (playerStatus === PlayerStatus.PAUSED) {\n            dispatch(playerActions.unPause());\n        }\n    };\n    const onPause = () => dispatch(playerActions.pause());\n    const onStop = () => dispatch(playerActions.stop());\n\n    const onJumpToEnd = () => {\n        if (isOk(rotationCommands)) {\n            dispatch(cubeActions.applyRotationCommands(rotationCommands.value));\n        }\n    };\n\n    const onShuffle = () =>\n        dispatch(\n            playerActions.updateNotation(createRandomNotation(cubeDimension))\n        );\n\n    const onRefresh = () => dispatch(cubeActions.resetCube());\n\n    return (\n        <div className=\"algorithm-player\">\n            <TextField\n                label=\"Algorithm\"\n                fullWidth={true}\n                value={playerNotation}\n                onChange={updateNotation}\n                disabled={!isStopped}\n                error={hasParseError}\n            />\n            {isError(rotationCommands) && (\n                <div style={{ marginTop: 5, marginBottom: 5 }}>\n                    {rotationCommands.expected.map((errorMsg) => (\n                        <Chip\n                            key={errorMsg}\n                            color={'secondary'}\n                            size={'small'}\n                            label={errorMsg}\n                        />\n                    ))}\n                </div>\n            )}\n            <div className=\"algorithm-player__buttons\">\n                <div>\n                    {playerStatus === PlayerStatus.PLAYING ? (\n                        <IconButton onClick={onPause}>\n                            <Pause />\n                        </IconButton>\n                    ) : (\n                        <IconButton\n                            onClick={onPlay}\n                            disabled={isNotationEmpty || hasParseError}\n                        >\n                            <PlayArrow />\n                        </IconButton>\n                    )}\n                    <IconButton onClick={onStop} disabled={isStopped}>\n                        <Stop />\n                    </IconButton>\n                    <IconButton\n                        onClick={onJumpToEnd}\n                        disabled={\n                            !isStopped || isNotationEmpty || hasParseError\n                        }\n                    >\n                        <SkipNext />\n                    </IconButton>\n                </div>\n                <div>\n                    <IconButton onClick={onShuffle} disabled={!isStopped}>\n                        <Shuffle />\n                    </IconButton>\n                    <IconButton onClick={onRefresh} disabled={!isStopped}>\n                        <Refresh />\n                    </IconButton>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(Player);\n","import React, { useEffect } from 'react';\nimport RubiksCube from './cube/RubiksCube';\nimport Interface from './interface/Interface';\nimport './App.scss';\nimport { useDispatch } from 'react-redux';\nimport { cubeActions } from './states/cube/CubeActions';\n\nconst App: React.FunctionComponent = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(cubeActions.resetCube());\n    }, []);\n\n    return (\n        <div className=\"app\">\n            <Interface />\n            <RubiksCube />\n        </div>\n    );\n};\n\nexport default App;\n","import { ofType } from 'redux-observable';\nimport { cubeActions } from './CubeActions';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { AppEpic } from '../States';\nimport { generateCubicles } from '../../cube/CubeUtils';\n\nconst updateCubicles: AppEpic = (action$, state$) =>\n    action$.pipe(\n        ofType(cubeActions.setCubeDimension.type, cubeActions.resetCube.type),\n        withLatestFrom(state$),\n        map(([_, state]) =>\n            cubeActions.updateCubicles(\n                generateCubicles(\n                    state.cube.size / state.cube.dimension,\n                    state.cube.gapFactor,\n                    state.cube.dimension\n                )\n            )\n        )\n    );\n\nexport const cubeEpics = [updateCubicles];\n","import { AppEpic } from '../States';\nimport { playerActions } from './PlayerActions';\nimport {\n    concatMap,\n    delay,\n    filter,\n    first,\n    map,\n    mapTo,\n    withLatestFrom,\n} from 'rxjs/operators';\nimport { makeNotationParser } from '../../cube/algorithms/Parser';\nimport { cubeActions } from '../cube/CubeActions';\nimport { fromEvent, merge, Subject } from 'rxjs';\nimport {\n    isLoopedRotationCommands,\n    RotationCommand,\n    SingleRotationCommand,\n} from '../../cube/algorithms/RotationCommand';\nimport Maybe from '../../utils/Maybe';\nimport { PlayerStatus } from './PlayerState';\nimport { Action } from 'redux';\nimport { ofType } from 'redux-observable';\n\nconst parseNotation: AppEpic = (action$, state$) =>\n    action$.pipe(\n        ofType(\n            cubeActions.setCubeDimension.type,\n            playerActions.updateNotation.type\n        ),\n        withLatestFrom(state$),\n        map(([_, state]) => {\n            const parser = makeNotationParser(state.cube.dimension);\n            return parser.rotationCommands.parse(state.player.notation);\n        }),\n        map(playerActions.parsedNotation)\n    );\n\nfunction* singleRotationCommandGenerator(\n    rotationCommands: RotationCommand[]\n): Generator<SingleRotationCommand> {\n    for (const rotationCommand of rotationCommands) {\n        if (isLoopedRotationCommands(rotationCommand)) {\n            for (let i = 0; i < rotationCommand.iterations; i++) {\n                yield* singleRotationCommandGenerator(rotationCommand.commands);\n            }\n        } else {\n            yield rotationCommand;\n        }\n    }\n}\n\nconst player: AppEpic = (action$, state$) => {\n    const play$ = action$.pipe(filter(playerActions.play.match));\n    const unPause$ = action$.pipe(filter(playerActions.unPause.match));\n    const stop$ = action$.pipe(filter(playerActions.stop.match));\n\n    let rotationCommandGenerator: Maybe<Generator<\n        SingleRotationCommand,\n        SingleRotationCommand\n    >> = Maybe.none();\n\n    const rotationCommandDelay$ = new Subject<boolean>();\n\n    play$\n        .pipe(\n            filter((_) => rotationCommandGenerator.isNone()),\n            map((it) => it.payload),\n            map(singleRotationCommandGenerator)\n        )\n        .subscribe((it) => {\n            rotationCommandGenerator = Maybe.some(it);\n            rotationCommandDelay$.next(true);\n        });\n\n    unPause$.subscribe((_) => rotationCommandDelay$.next(true));\n\n    stop$.subscribe((_) => {\n        rotationCommandGenerator = Maybe.none();\n    });\n\n    const setCurrentRotationCommand$ = rotationCommandDelay$.pipe(\n        withLatestFrom(state$),\n        filter(([_, state]) => state.player.status === PlayerStatus.PLAYING),\n        map((_) =>\n            rotationCommandGenerator\n                .map((it) => it.next().value)\n                .map<Action>(playerActions.setCurrentRotationCommand)\n                .unwrapOr(playerActions.stop)\n        )\n    );\n\n    const transitionEnd$ = fromEvent<TransitionEvent>(\n        window,\n        'transitionend'\n    ).pipe(\n        filter(\n            (event) =>\n                event.propertyName === 'transform' &&\n                (event.target as HTMLElement).className.includes(\n                    'rubiks-cube__cubicle'\n                )\n        )\n    );\n\n    const applyRotationCommand$ = action$.pipe(\n        filter(playerActions.setCurrentRotationCommand.match),\n        map((action) => [action.payload]),\n        map(cubeActions.applyRotationCommands),\n        concatMap((action) => transitionEnd$.pipe(first(), mapTo(action)))\n    );\n\n    action$\n        .pipe(filter(cubeActions.applyRotationCommands.match), delay(10))\n        .subscribe((_) => rotationCommandDelay$.next(true));\n\n    return merge(setCurrentRotationCommand$, applyRotationCommand$);\n};\n\nexport const playerEpics = [parseNotation, player];\n","import { combineEpics, createEpicMiddleware } from 'redux-observable';\nimport { cubeEpics } from './cube/CubeEpics';\nimport { AppState } from './States';\nimport { playerEpics } from './player/PlayerEpics';\nimport { Action } from 'redux';\n\nconst epics = combineEpics(...cubeEpics, ...playerEpics);\nexport const epicMiddleWare = createEpicMiddleware<Action, Action, AppState>();\n\nexport const setupEpics = () => epicMiddleWare.run(epics);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { epicMiddleWare, setupEpics } from './Epics';\nimport { reducer } from './States';\n\nconst middleware = [...getDefaultMiddleware({ thunk: false }), epicMiddleWare];\n\nexport const setupStore = () => {\n    const store = configureStore({ reducer, middleware });\n    setupEpics();\n    return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './tsx/App';\nimport { Provider } from 'react-redux';\nimport { setupStore } from './tsx/states/Store';\nimport './tsx/cube/algorithms/Parser';\n\nwindow.addEventListener('load', function load() {\n    window.removeEventListener('load', load);\n\n    const store = setupStore();\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    );\n});\n"],"sourceRoot":""}